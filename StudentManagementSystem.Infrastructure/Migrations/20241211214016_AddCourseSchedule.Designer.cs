// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudentManagementSystem.Infrastructure;

#nullable disable

namespace StudentManagementSystem.Infrastructure.Migrations
{
    [DbContext(typeof(StudentManagementDbContext))]
    [Migration("20241211214016_AddCourseSchedule")]
    partial class AddCourseSchedule
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = "aa7d01c6-9499-4ed4-a38e-3d0afa2b707c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eead06e8-029e-4ed6-b562-0e2cb3e55ab5",
                            Email = "ivan414@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVAN414@GMAIL.COM",
                            NormalizedUserName = "IVAN414@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMLDnq49Z5cWQmn4d7/7kXFMoV049QSOUH65EXXH033ww4Lph6XdU841vHgw+Q5YbA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3e451559-247b-45d7-9082-0024f483b1cb",
                            TwoFactorEnabled = false,
                            UserName = "ivan414@gmail.com"
                        },
                        new
                        {
                            Id = "f2875100-0cf1-4b1d-ba91-1dfa38690f84",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "65b126db-7971-424d-9b8b-8176752815cc",
                            Email = "maria270@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARIA270@GMAIL.COM",
                            NormalizedUserName = "MARIA270@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEIHUxAZDUlrI9GGAwKWewfGtwMY2RPIUQFOtIXWw+3dD9ZxaAwbzZDZjbjaSt50pw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f4538cca-0998-4a4b-9567-ce17c32c888e",
                            TwoFactorEnabled = false,
                            UserName = "maria270@gmail.com"
                        },
                        new
                        {
                            Id = "b65e6163-1454-4164-9869-2ff822f9da98",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ceaeb7eb-4fcd-4e7f-9b33-705975812b14",
                            Email = "elena309@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ELENA309@GMAIL.COM",
                            NormalizedUserName = "ELENA309@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPMbo3zRTm774dCBUcfKZT3RZCPpg/58Q6jpP6l5UbyL8ktAxpNckozwvgWNfEuLcw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "64b93f04-fea4-4494-81e4-6fd79c0d1b58",
                            TwoFactorEnabled = false,
                            UserName = "elena309@gmail.com"
                        },
                        new
                        {
                            Id = "c5d7d80f-08d5-41ec-892c-30833098c047",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9f8dc9a4-a94e-47aa-867c-f78ea7eda692",
                            Email = "viktor725@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "VIKTOR725@GMAIL.COM",
                            NormalizedUserName = "VIKTOR725@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHQRIioCexur6mYDZ3IBoWrswz9PYoX6NL1CP8hMST3afSy/n62zyGOeDM/GcxxYeA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1edd5618-a437-46cb-8a07-797231b442fa",
                            TwoFactorEnabled = false,
                            UserName = "viktor725@gmail.com"
                        },
                        new
                        {
                            Id = "217e3e65-026d-4a8e-97af-a4fb30dfab30",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8bd8d7ad-88f5-44c1-921c-ac680b60346f",
                            Email = "pesho278@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PESHO278@GMAIL.COM",
                            NormalizedUserName = "PESHO278@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECYdFU/QJJ01hwo3+ZzcYTROsx4gkJENYZr518liCMDK+7uA9GdHaUTtfpInRyWZmw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "30a49595-9a44-45e0-91a9-641077f5e804",
                            TwoFactorEnabled = false,
                            UserName = "pesho278@gmail.com"
                        },
                        new
                        {
                            Id = "8f7bca8f-059f-4750-8bfe-7def13ef37e8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7c079519-dff4-4164-889f-f7182dfbbcae",
                            Email = "nina.borisova@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "NINA.BORISOVA@GMAIL.COM",
                            NormalizedUserName = "NINA.BORISOVA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELO90toL2rKbwjCieRkPXd5l/bIw0md9VQBGnRJMYXWK7Sd/wT20ZUZn2yfmJcLqbQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f072b324-e567-4eef-8be4-c78dc4b71f60",
                            TwoFactorEnabled = false,
                            UserName = "nina.borisova@gmail.com"
                        },
                        new
                        {
                            Id = "1a688e82-f609-47af-a359-d8bcdd62b5e9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ea1228d7-845a-4075-a81c-c6c764c0ee2f",
                            Email = "ivo.pavlov@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVO.PAVLOV@GMAIL.COM",
                            NormalizedUserName = "IVO.PAVLOV@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEElkQkhlPVa1qpb4F4KXW6HZ9bglXurz5FSPACPvdSxbxxB8GD5+yDB6GOY/9cGvmg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a865a551-214c-43cb-a83f-804dcdb9386d",
                            TwoFactorEnabled = false,
                            UserName = "ivo.pavlov@gmail.com"
                        },
                        new
                        {
                            Id = "01185cf1-525d-478a-ad05-b9629573333a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c9735849-17b7-4b68-99de-5e16af5d8ee4",
                            Email = "katerina.gancheva@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "KATERINA.GANCHEVA@GMAIL.COM",
                            NormalizedUserName = "KATERINA.GANCHEVA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENDglC+loZQPOyb7SUAGhRdtrtPs6Jf1n5elF40j9zx9Zj32JZRHTgIzZ3h5O63rDA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fb7fd78b-942a-4585-9571-10408231f0f9",
                            TwoFactorEnabled = false,
                            UserName = "katerina.gancheva@gmail.com"
                        },
                        new
                        {
                            Id = "cab3584a-da3f-4858-a65a-3f7bde9e553f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9360f048-7c5d-4919-a79c-e87b4337cc53",
                            Email = "dimitar.mihailov@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DIMITAR.MIHAILOV@GMAIL.COM",
                            NormalizedUserName = "DIMITAR.MIHAILOV@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGk0lYPqIQ0lRtP0yyEasm3nHCK+WBJevOFYwUK/U8LDbk+fP+LlVlLRF/NwCqNFug==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "35e13c4a-7cf1-41c0-93b1-2ad03578cf05",
                            TwoFactorEnabled = false,
                            UserName = "dimitar.mihailov@gmail.com"
                        },
                        new
                        {
                            Id = "325092c7-9882-40d9-854b-32326c2bd43b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1517f73b-53a8-49f0-b448-5daf08a9d366",
                            Email = "stefan.yordanov@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STEFAN.YORDANOV@GMAIL.COM",
                            NormalizedUserName = "STEFAN.YORDANOV@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEdt3/ks6EKXdAkNmjpIRcvfDofmiE0jaZpRdwpGIDykad8rrtNeP3rSZCwWUHv37g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b6d79182-feb4-44f5-b267-ef10196302fc",
                            TwoFactorEnabled = false,
                            UserName = "stefan.yordanov@gmail.com"
                        },
                        new
                        {
                            Id = "2e830c43-2ce2-462d-9880-be8aa1e71696",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "86777ae3-3c55-4cc8-b41e-4791ef03639a",
                            Email = "diana.ruseva@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DIANA.RUSEVA@GMAIL.COM",
                            NormalizedUserName = "DIANA.RUSEVA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGZsQNPZd2byGA3bJEnAFHnb/dpXT2VFyaPiNqvEYMespk80IpkFZmhrK/vLp0ueHw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4c5cac00-6b72-404d-accb-82476963cd17",
                            TwoFactorEnabled = false,
                            UserName = "diana.ruseva@gmail.com"
                        },
                        new
                        {
                            Id = "c64af0f1-3716-4e30-b5f7-b0c5153e2b01",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d1a7ea85-34dc-4274-a87e-38c74a046b76",
                            Email = "petar.georgiev@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PETAR.GEORGIEV@GMAIL.COM",
                            NormalizedUserName = "PETAR.GEORGIEV@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECKwdY6V59ljFdD63hG/LjN/2TXEcfGkvmy2BhRKVkHPftjioyd3oSgtUwf2klzkXA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ac5c60d3-bcae-4170-9fed-6e2420284445",
                            TwoFactorEnabled = false,
                            UserName = "petar.georgiev@gmail.com"
                        },
                        new
                        {
                            Id = "ab696b9f-f5d2-45a0-8495-96e2d2a01acc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "47e9798d-c883-4cb3-b6df-dd88bfc74cef",
                            Email = "tanya.ivanova@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TANYA.IVANOVA@GMAIL.COM",
                            NormalizedUserName = "TANYA.IVANOVA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEG+WvSnTMd4rR/t1qz0NFuf5MOPD0d9eQwGFGWEUgebbJi8SrC9KSp0yEH3kR016Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ed22af25-6b0c-4b6c-9db1-a1f5f15f3bc4",
                            TwoFactorEnabled = false,
                            UserName = "tanya.ivanova@gmail.com"
                        },
                        new
                        {
                            Id = "8eb86d7d-02f7-477d-8e6f-539d7c155930",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b549df07-47f8-4c74-8743-7a428de33ad7",
                            Email = "aleksandar.pavlov@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALEKSANDAR.PAVLOV@GMAIL.COM",
                            NormalizedUserName = "ALEKSANDAR.PAVLOV@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHRKXvxYfMk6zV/d8A+cEuTV+tSLf3VkED1PxhzeUKBkdy3rMazo1+X1xKQJwLVxYw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4ff63f36-c4d5-4e6d-afbf-6548b3f63a73",
                            TwoFactorEnabled = false,
                            UserName = "aleksandar.pavlov@gmail.com"
                        },
                        new
                        {
                            Id = "3034c6c5-e1f5-4655-9baf-079f41605550",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "35dec442-c515-49c9-88f8-c677d1820b30",
                            Email = "julia.dimitrova@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JULIA.DIMITROVA@GMAIL.COM",
                            NormalizedUserName = "JULIA.DIMITROVA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENrq2fHZI+0tObZhD0agGjegT9WsiNNZ9PJCuqVSp8IgRpYQMjhme+AGwKc+WBhfhw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bff7c245-5129-422a-9304-4ceb7b588cb2",
                            TwoFactorEnabled = false,
                            UserName = "julia.dimitrova@gmail.com"
                        },
                        new
                        {
                            Id = "e8264a26-ea76-44c4-a013-12759599a081",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c1e56204-4a65-4ae0-8ec7-93cd102fa383",
                            Email = "kiril.kolarov@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "KIRIL.KOLAROV@GMAIL.COM",
                            NormalizedUserName = "KIRIL.KOLAROV@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAED9ZZIoYFCRKFOX18NPusOO629gwlZkv6Urut3jtWT4GlJazYhHHBkxyzXQI1OIQiA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "45cd7d03-885a-449e-b960-f685e70dc565",
                            TwoFactorEnabled = false,
                            UserName = "kiril.kolarov@gmail.com"
                        },
                        new
                        {
                            Id = "e0e396e6-53f2-40e9-8013-664b8a8dbd46",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "419d4cc3-b1a5-4de1-b716-bdfc6d80a00d",
                            Email = "daniela.todorova@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DANIELA.TODOROVA@GMAIL.COM",
                            NormalizedUserName = "DANIELA.TODOROVA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEL9h3QjSbshj9FlZF1Y5JHwwZaOAx1zp7jctX53k+BDSQ0B8nqB5QQcWqUjF106/8w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7aa89003-4189-4708-80b9-e44864cf3000",
                            TwoFactorEnabled = false,
                            UserName = "daniela.todorova@gmail.com"
                        },
                        new
                        {
                            Id = "b8d81f44-f8a9-43e6-83fe-e62ab38f30cf",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ce23eb0d-12b9-4981-9af4-bf8e2ae0aacd",
                            Email = "lazar.grigorov@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "LAZAR.GRIGOROV@GMAIL.COM",
                            NormalizedUserName = "LAZAR.GRIGOROV@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOEhHznFM7Ey1Bn4S33qWxxwTe36bmX2KRPVPOhBWP1Hx2fNyCoIXmf93w5ymiv0fA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e7b4c0bb-b390-4528-af1c-088919a5920f",
                            TwoFactorEnabled = false,
                            UserName = "lazar.grigorov@gmail.com"
                        },
                        new
                        {
                            Id = "0c4b8988-22f2-4ed5-8486-85e757a97e41",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d3e71c85-d230-4c2f-957c-9a562f191c11",
                            Email = "ivanka.nikolova@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVANKA.NIKOLOVA@GMAIL.COM",
                            NormalizedUserName = "IVANKA.NIKOLOVA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOO036DvHY9xKax4Fh/r2daQcfIb68IW6EoDORS9hMfryZlBoQHGrkVAyU2y921LcQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ee03ec45-a9a7-43ea-b952-21ae2febbf95",
                            TwoFactorEnabled = false,
                            UserName = "ivanka.nikolova@gmail.com"
                        },
                        new
                        {
                            Id = "3a76fd9d-a1bb-48f2-9626-1122ecf2d797",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c3442ca5-6fe1-43b0-822b-d6f15f088433",
                            Email = "gergana.georgieva@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "GERGANA.GEORGIEVA@GMAIL.COM",
                            NormalizedUserName = "GERGANA.GEORGIEVA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEC/waosCmGlW2I4vEWO7L/8iBTbTIdrSvOnB83WlZe0CDcT7zn6bhqT7OOnRSKAPug==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8e7f848f-2e4b-477e-bd64-468b55533373",
                            TwoFactorEnabled = false,
                            UserName = "gergana.georgieva@gmail.com"
                        },
                        new
                        {
                            Id = "51065229-23b9-402f-a54d-00bb813d6b1c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a55e2b0e-07cc-4019-9b9b-3b2ef6486ddd",
                            Email = "stan12@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STAN12@GMAIL.COM",
                            NormalizedUserName = "STAN12@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEtbwgvrWvC8aRe1boJzXZPq8a0KbJxlYiLxnrQo8Dl2kdeWBprowgJ6ikTuHpDkcw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "stan12@gmail.com"
                        },
                        new
                        {
                            Id = "6b6433a7-3564-4cba-ace2-4a44afca4177",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "da53eb47-ed29-42fd-9e04-356a9d46ad83",
                            Email = "ivdra23@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVDRA23@GMAIL.COM",
                            NormalizedUserName = "IVDRA23@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKjUq2vVSdx4/1KRjaOnKUs7eWIxRgfZT0dh16VFo+9aPD90TnouOybSNVCiaSdZEQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "ivdra23@gmail.com"
                        },
                        new
                        {
                            Id = "331d08d0-d407-4d61-af6e-1bb134ae7998",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2365b58e-3996-4196-afff-fe22d9e20917",
                            Email = "mariya.petrova@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARIYA.PETROVA@GMAIL.COM",
                            NormalizedUserName = "MARIYA.PETROVA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPqM4zHCXnBKYhum7yyY4BRjtzrwTSp9smzBY3fJtKU/ts+G3SzoeIv/qln7b4YOZA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "mariya.petrova@gmail.com"
                        },
                        new
                        {
                            Id = "030ddabd-7dcb-46ca-bab6-3feeae3492a8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d5ece589-b50e-48b5-88ae-d59af6e55b46",
                            Email = "nikolai.vasilev@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "NIKOLAI.VASILEV@GMAIL.COM",
                            NormalizedUserName = "NIKOLAI.VASILEV@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENUdSkomZFYTn4GpvQEPEMy71C71XKFLj7JHPZSDJMu7c1pQW53oYhJGSf1JxBzrZA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "nikolai.vasilev@gmail.com"
                        },
                        new
                        {
                            Id = "291cc1a8-8f2c-4f48-a919-ff4d9692a859",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7cdd0333-c250-4baa-bdc5-46b5f8b3cc82",
                            Email = "radoslav.ivanov@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "RADOSLAV.IVANOV@GMAIL.COM",
                            NormalizedUserName = "RADOSLAV.IVANOV@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEECf8YNiB0n4vmkg2J3cC/3t82y0nfZUts1tKLbiOdcF6G0ZdCX48Zt42rbEKKaQUg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "radoslav.ivanov@gmail.com"
                        },
                        new
                        {
                            Id = "32739a60-8250-4178-a19c-96d90444ebd3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b66e8890-92df-42d3-bc7b-4cfaeb008579",
                            Email = "katerina.dimitrova@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "KATERINA.DIMITROVA@GMAIL.COM",
                            NormalizedUserName = "KATERINA.DIMITROVA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEL3kRbTehjaFMWkY1xrOh2Um1g7RZVdBtzyyD+uSM95lFQd1ell/tvvPApE7C6qAig==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "katerina.dimitrova@gmail.com"
                        },
                        new
                        {
                            Id = "3647bea5-9ce4-4d8b-bf0f-7a5fbd3ea729",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9b9fe69b-3365-4e4b-93cd-4937ffd4459f",
                            Email = "gosho.georgiev@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "GOSHO.GEORGIEV@GMAIL.COM",
                            NormalizedUserName = "GOSHO.GEORGIEV@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBUHFbftkNGHCVZL+RzntVKkaJUP3uVwsdl28Py+INu5qgUJpyhuCXs7hrxRr133nQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "gosho.georgiev@gmail.com"
                        },
                        new
                        {
                            Id = "2ad410b1-c108-4b9c-99f1-0f68dbd6ad45",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0408c898-c357-4d64-a041-04ff4296d271",
                            Email = "lidia.todorova@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "LIDIA.TODOROVA@GMAIL.COM",
                            NormalizedUserName = "LIDIA.TODOROVA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEK7zO3wfbkoGGLV6PlnNKtI9dn64yle86JZzrbeanzXdN+WWUlKwMiuaYiAw8Xnrfg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "lidia.todorova@gmail.com"
                        },
                        new
                        {
                            Id = "04b6c6b1-5f9b-4c7a-9f42-86193c03d327",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bdef660e-d07e-4b2d-b5e4-2b6fd11ca8b6",
                            Email = "stefan.kovachev@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STEFAN.KOVACHEV@GMAIL.COM",
                            NormalizedUserName = "STEFAN.KOVACHEV@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFbJ0kvsCxF5bqWTy7ZUDcYlbKOguKPq0Pca/c+UTXFh6bWY5cDeqS+A3jvSQpPDNg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "stefan.kovachev@gmail.com"
                        },
                        new
                        {
                            Id = "9ab8c775-88c0-4dc3-b11d-178c3ca2129",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "da456284-7d9a-43b7-b210-40e2e8faaf4f",
                            Email = "valentina.nikolova@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "VALENTINA.NIKOLOVA@GMAIL.COM",
                            NormalizedUserName = "VALENTINA.NIKOLOVA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEG6SEq84c10TIfo6CwoauM9bw5us7XPkeGNSSzuP54T9BhWOhtqegId3MBXHvCIQlg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "valentina.nikolova@gmail.com"
                        },
                        new
                        {
                            Id = "bb8c0d8c-24e0-4e4f-b8a7-5c69e5895b9f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4dc51ae2-b8ad-43e5-990f-4c5f332c7e8a",
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEC7ZIXKzgvssXPc7MjqBxgaXqKb0xw437YK1xRzke5Z4xcBw1MaBqTNH/YJrQF8saQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "bb8c0d8c-24e0-4e4f-b8a7-5c69e5895b9f",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "51065229-23b9-402f-a54d-00bb813d6b1c",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "aa7d01c6-9499-4ed4-a38e-3d0afa2b707c",
                            RoleId = "3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Absence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Absence Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasComment("Course Identifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasComment("Date of Absence");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Shows if absence is Deleted");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasComment("Student Identifier");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("Absences");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Shows if class is Deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("The name of the class");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int")
                        .HasComment("The ID of the teacher for this class");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Classes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "10b",
                            TeacherId = 21
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "9a",
                            TeacherId = 22
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "11c",
                            TeacherId = 23
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            Name = "12a",
                            TeacherId = 24
                        },
                        new
                        {
                            Id = 5,
                            IsDeleted = false,
                            Name = "8b",
                            TeacherId = 25
                        },
                        new
                        {
                            Id = 6,
                            IsDeleted = false,
                            Name = "7a",
                            TeacherId = 26
                        },
                        new
                        {
                            Id = 7,
                            IsDeleted = false,
                            Name = "6c",
                            TeacherId = 27
                        },
                        new
                        {
                            Id = 8,
                            IsDeleted = false,
                            Name = "10a",
                            TeacherId = 28
                        },
                        new
                        {
                            Id = 9,
                            IsDeleted = false,
                            Name = "9b",
                            TeacherId = 29
                        },
                        new
                        {
                            Id = 10,
                            IsDeleted = false,
                            Name = "11a",
                            TeacherId = 30
                        });
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.ClassCourse", b =>
                {
                    b.Property<int>("ClassId")
                        .HasColumnType("int")
                        .HasComment("Class Identifier");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasComment("Course Identifier");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date of enrollment");

                    b.HasKey("ClassId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("ClassCourses");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Course Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Course Description");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasComment("Course End Date");

                    b.Property<int>("EnrollmentCap")
                        .HasColumnType("int")
                        .HasComment("Maximum number of students allowed");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Shows if course is Deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Course Name");

                    b.Property<string>("PublisherId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Publisher Identification");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasComment("Course Start Date");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int")
                        .HasComment("Teacher of the Course");

                    b.HasKey("Id");

                    b.HasIndex("PublisherId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Best biology learning system in the world",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnrollmentCap = 0,
                            IsDeleted = false,
                            Name = "Biology",
                            PublisherId = "bb8c0d8c-24e0-4e4f-b8a7-5c69e5895b9f",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TeacherId = 21
                        },
                        new
                        {
                            Id = 2,
                            Description = "Best history learning system in the world",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnrollmentCap = 0,
                            IsDeleted = false,
                            Name = "History",
                            PublisherId = "bb8c0d8c-24e0-4e4f-b8a7-5c69e5895b9f",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TeacherId = 22
                        },
                        new
                        {
                            Id = 3,
                            Description = "Comprehensive mathematics curriculum for all levels",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnrollmentCap = 0,
                            IsDeleted = false,
                            Name = "Mathematics",
                            PublisherId = "bb8c0d8c-24e0-4e4f-b8a7-5c69e5895b9f",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TeacherId = 23
                        },
                        new
                        {
                            Id = 4,
                            Description = "Advanced physics concepts and practical applications",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnrollmentCap = 0,
                            IsDeleted = false,
                            Name = "Physics",
                            PublisherId = "bb8c0d8c-24e0-4e4f-b8a7-5c69e5895b9f",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TeacherId = 24
                        },
                        new
                        {
                            Id = 5,
                            Description = "Exploring the fundamentals of chemistry",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnrollmentCap = 0,
                            IsDeleted = false,
                            Name = "Chemistry",
                            PublisherId = "bb8c0d8c-24e0-4e4f-b8a7-5c69e5895b9f",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TeacherId = 25
                        },
                        new
                        {
                            Id = 6,
                            Description = "In-depth analysis of classic and modern literature",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnrollmentCap = 0,
                            IsDeleted = false,
                            Name = "English Literature",
                            PublisherId = "bb8c0d8c-24e0-4e4f-b8a7-5c69e5895b9f",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TeacherId = 26
                        },
                        new
                        {
                            Id = 7,
                            Description = "Programming, algorithms, and computing fundamentals",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnrollmentCap = 0,
                            IsDeleted = false,
                            Name = "Computer Science",
                            PublisherId = "bb8c0d8c-24e0-4e4f-b8a7-5c69e5895b9f",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TeacherId = 27
                        },
                        new
                        {
                            Id = 8,
                            Description = "Understanding economic systems, theories, and policies",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnrollmentCap = 0,
                            IsDeleted = false,
                            Name = "Economics",
                            PublisherId = "bb8c0d8c-24e0-4e4f-b8a7-5c69e5895b9f",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TeacherId = 28
                        },
                        new
                        {
                            Id = 9,
                            Description = "Exploring the earth's physical features and human geography",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnrollmentCap = 0,
                            IsDeleted = false,
                            Name = "Geography",
                            PublisherId = "bb8c0d8c-24e0-4e4f-b8a7-5c69e5895b9f",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TeacherId = 29
                        },
                        new
                        {
                            Id = 10,
                            Description = "The study of art movements, artists, and their works",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnrollmentCap = 0,
                            IsDeleted = false,
                            Name = "Art History",
                            PublisherId = "bb8c0d8c-24e0-4e4f-b8a7-5c69e5895b9f",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TeacherId = 30
                        });
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.CourseSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Course Schedule Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassId")
                        .HasColumnType("int")
                        .HasComment("Class Identifier");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasComment("Course Identifier");

                    b.Property<int>("Day")
                        .HasColumnType("int")
                        .HasComment("Day of the week");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time")
                        .HasComment("End Time");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time")
                        .HasComment("Start Time");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("CourseId");

                    b.ToTable("CoursesSchedules");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique Identifier for the Grade entry");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasComment("Identifier of the Course");

                    b.Property<DateTime>("GradeAssignedDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date when the grade was assigned");

                    b.Property<double>("GradeScore")
                        .HasColumnType("float")
                        .HasComment("Grade received by the student for a specific course assessment");

                    b.Property<string>("GradeType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Description or type of the grade (e.g., Midterm, Final, Homework)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Shows if grade is Deleted");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasComment("Identifier of the Student");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("News Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("News Content");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasComment("News Date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Shows if news is Deleted");

                    b.Property<string>("PublisherId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Publisher Identifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("News Title");

                    b.HasKey("Id");

                    b.HasIndex("PublisherId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Remark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Remark Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasComment("Course Identifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the remark");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Shows if remark is Deleted");

                    b.Property<string>("RemarkText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Remark Text");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasComment("Student Identifier");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int")
                        .HasComment("Teacher Identifier");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Remarks");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("School Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("School Name");

                    b.HasKey("Id");

                    b.ToTable("Schools");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "School of Mathematics"
                        },
                        new
                        {
                            Id = 2,
                            Name = "School of Physics"
                        },
                        new
                        {
                            Id = 3,
                            Name = "School of Chemistry"
                        },
                        new
                        {
                            Id = 4,
                            Name = "School of Biology"
                        },
                        new
                        {
                            Id = 5,
                            Name = "School of Computer Science"
                        },
                        new
                        {
                            Id = 6,
                            Name = "School of Economics"
                        },
                        new
                        {
                            Id = 7,
                            Name = "School of Law"
                        },
                        new
                        {
                            Id = 8,
                            Name = "School of Medicine"
                        },
                        new
                        {
                            Id = 9,
                            Name = "School of Philosophy"
                        },
                        new
                        {
                            Id = 10,
                            Name = "School of History"
                        });
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Student Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassId")
                        .HasColumnType("int")
                        .HasComment("Class Identifier");

                    b.Property<string>("ContactDetails")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Student Contact Details");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasComment("Date of birth of Student");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Student Email Address");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Student First Name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Shows if student is Deleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Student Last Name");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Student Middle Name");

                    b.Property<double>("Performance")
                        .HasColumnType("float")
                        .HasComment("Student Performance");

                    b.Property<string>("PersonalId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("Student Personal Identification Number");

                    b.Property<string>("ProfilePicturePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Path to the profile picture of the student");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasComment("School Identifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User Identifier");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("UserId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClassId = 3,
                            ContactDetails = "GSM:882163890",
                            DateOfBirth = new DateTime(2006, 12, 11, 23, 40, 14, 114, DateTimeKind.Local).AddTicks(2116),
                            Email = "ivan414@gmail.com",
                            FirstName = "Ivan",
                            IsDeleted = false,
                            LastName = "Petrov",
                            MiddleName = "Grigorov",
                            Performance = 0.0,
                            PersonalId = "9564039305",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            UserId = "aa7d01c6-9499-4ed4-a38e-3d0afa2b707c"
                        },
                        new
                        {
                            Id = 2,
                            ClassId = 5,
                            ContactDetails = "GSM:889556992",
                            DateOfBirth = new DateTime(2007, 12, 11, 23, 40, 14, 114, DateTimeKind.Local).AddTicks(2179),
                            Email = "maria270@gmail.com",
                            FirstName = "Maria",
                            IsDeleted = false,
                            LastName = "Grigorov",
                            MiddleName = "Georgiev",
                            Performance = 0.0,
                            PersonalId = "6934567210",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            UserId = "f2875100-0cf1-4b1d-ba91-1dfa38690f84"
                        },
                        new
                        {
                            Id = 3,
                            ClassId = 5,
                            ContactDetails = "GSM:883854732",
                            DateOfBirth = new DateTime(2007, 12, 11, 23, 40, 14, 114, DateTimeKind.Local).AddTicks(2184),
                            Email = "elena309@gmail.com",
                            FirstName = "Elena",
                            IsDeleted = false,
                            LastName = "Todorov",
                            MiddleName = "Grigorov",
                            Performance = 0.0,
                            PersonalId = "3699302616",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            UserId = "b65e6163-1454-4164-9869-2ff822f9da98"
                        },
                        new
                        {
                            Id = 4,
                            ClassId = 4,
                            ContactDetails = "GSM:886992374",
                            DateOfBirth = new DateTime(2006, 12, 11, 23, 40, 14, 114, DateTimeKind.Local).AddTicks(2189),
                            Email = "viktor725@gmail.com",
                            FirstName = "Viktor",
                            IsDeleted = false,
                            LastName = "Todorov",
                            MiddleName = "Todorov",
                            Performance = 0.0,
                            PersonalId = "2940063663",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            UserId = "c5d7d80f-08d5-41ec-892c-30833098c047"
                        },
                        new
                        {
                            Id = 5,
                            ClassId = 2,
                            ContactDetails = "GSM:884738222",
                            DateOfBirth = new DateTime(2008, 12, 11, 23, 40, 14, 114, DateTimeKind.Local).AddTicks(2193),
                            Email = "pesho278@gmail.com",
                            FirstName = "Pesho",
                            IsDeleted = false,
                            LastName = "Nikolov",
                            MiddleName = "Nikolov",
                            Performance = 0.0,
                            PersonalId = "4204190914",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            UserId = "217e3e65-026d-4a8e-97af-a4fb30dfab30"
                        },
                        new
                        {
                            Id = 6,
                            ClassId = 1,
                            ContactDetails = "GSM:888183734",
                            DateOfBirth = new DateTime(2005, 12, 11, 23, 40, 14, 114, DateTimeKind.Local).AddTicks(2198),
                            Email = "nina.borisova@gmail.com",
                            FirstName = "Nina",
                            IsDeleted = false,
                            LastName = "Todorova",
                            MiddleName = "Borisova",
                            Performance = 0.0,
                            PersonalId = "5392831842",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            UserId = "8f7bca8f-059f-4750-8bfe-7def13ef37e8"
                        },
                        new
                        {
                            Id = 7,
                            ClassId = 1,
                            ContactDetails = "GSM:883764543",
                            DateOfBirth = new DateTime(2004, 12, 11, 23, 40, 14, 114, DateTimeKind.Local).AddTicks(2212),
                            Email = "ivo.pavlov@gmail.com",
                            FirstName = "Ivo",
                            IsDeleted = false,
                            LastName = "Pavlov",
                            MiddleName = "Petrov",
                            Performance = 0.0,
                            PersonalId = "6758374932",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            UserId = "1a688e82-f609-47af-a359-d8bcdd62b5e9"
                        },
                        new
                        {
                            Id = 8,
                            ClassId = 3,
                            ContactDetails = "GSM:882847361",
                            DateOfBirth = new DateTime(2003, 12, 11, 23, 40, 14, 114, DateTimeKind.Local).AddTicks(2217),
                            Email = "katerina.gancheva@gmail.com",
                            FirstName = "Katerina",
                            IsDeleted = false,
                            LastName = "Gancheva",
                            MiddleName = "Alexandrova",
                            Performance = 0.0,
                            PersonalId = "8293840598",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            UserId = "01185cf1-525d-478a-ad05-b9629573333a"
                        },
                        new
                        {
                            Id = 9,
                            ClassId = 4,
                            ContactDetails = "GSM:887654321",
                            DateOfBirth = new DateTime(2002, 12, 11, 23, 40, 14, 114, DateTimeKind.Local).AddTicks(2224),
                            Email = "dimitar.mihailov@gmail.com",
                            FirstName = "Dimitar",
                            IsDeleted = false,
                            LastName = "Mihailov",
                            MiddleName = "Georgiev",
                            Performance = 0.0,
                            PersonalId = "9382843621",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            UserId = "cab3584a-da3f-4858-a65a-3f7bde9e553f"
                        },
                        new
                        {
                            Id = 10,
                            ClassId = 5,
                            ContactDetails = "GSM:885676543",
                            DateOfBirth = new DateTime(2001, 12, 11, 23, 40, 14, 114, DateTimeKind.Local).AddTicks(2228),
                            Email = "stefan.yordanov@gmail.com",
                            FirstName = "Stefan",
                            IsDeleted = false,
                            LastName = "Yordanov",
                            MiddleName = "Ivanov",
                            Performance = 0.0,
                            PersonalId = "4902385726",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            UserId = "325092c7-9882-40d9-854b-32326c2bd43b"
                        },
                        new
                        {
                            Id = 11,
                            ClassId = 2,
                            ContactDetails = "GSM:882364788",
                            DateOfBirth = new DateTime(2004, 12, 11, 23, 40, 14, 114, DateTimeKind.Local).AddTicks(2235),
                            Email = "diana.ruseva@gmail.com",
                            FirstName = "Diana",
                            IsDeleted = false,
                            LastName = "Ruseva",
                            MiddleName = "Stoyanova",
                            Performance = 0.0,
                            PersonalId = "2945641207",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            UserId = "2e830c43-2ce2-462d-9880-be8aa1e71696"
                        },
                        new
                        {
                            Id = 12,
                            ClassId = 3,
                            ContactDetails = "GSM:889276400",
                            DateOfBirth = new DateTime(2003, 12, 11, 23, 40, 14, 114, DateTimeKind.Local).AddTicks(2239),
                            Email = "petar.georgiev@gmail.com",
                            FirstName = "Petar",
                            IsDeleted = false,
                            LastName = "Georgiev",
                            MiddleName = "Zahariev",
                            Performance = 0.0,
                            PersonalId = "1298345761",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            UserId = "c64af0f1-3716-4e30-b5f7-b0c5153e2b01"
                        },
                        new
                        {
                            Id = 13,
                            ClassId = 4,
                            ContactDetails = "GSM:883712508",
                            DateOfBirth = new DateTime(2005, 12, 11, 23, 40, 14, 114, DateTimeKind.Local).AddTicks(2243),
                            Email = "tanya.ivanova@gmail.com",
                            FirstName = "Tanya",
                            IsDeleted = false,
                            LastName = "Ivanova",
                            MiddleName = "Vasileva",
                            Performance = 0.0,
                            PersonalId = "8471629304",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            UserId = "ab696b9f-f5d2-45a0-8495-96e2d2a01acc"
                        },
                        new
                        {
                            Id = 14,
                            ClassId = 2,
                            ContactDetails = "GSM:887327015",
                            DateOfBirth = new DateTime(2006, 12, 11, 23, 40, 14, 114, DateTimeKind.Local).AddTicks(2247),
                            Email = "aleksandar.pavlov@gmail.com",
                            FirstName = "Aleksandar",
                            IsDeleted = false,
                            LastName = "Pavlov",
                            MiddleName = "Dimitrov",
                            Performance = 0.0,
                            PersonalId = "6503849201",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            UserId = "8eb86d7d-02f7-477d-8e6f-539d7c155930"
                        },
                        new
                        {
                            Id = 15,
                            ClassId = 5,
                            ContactDetails = "GSM:888014697",
                            DateOfBirth = new DateTime(2004, 12, 11, 23, 40, 14, 114, DateTimeKind.Local).AddTicks(2313),
                            Email = "julia.dimitrova@gmail.com",
                            FirstName = "Julia",
                            IsDeleted = false,
                            LastName = "Dimitrova",
                            MiddleName = "Borisova",
                            Performance = 0.0,
                            PersonalId = "8473926140",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            UserId = "3034c6c5-e1f5-4655-9baf-079f41605550"
                        },
                        new
                        {
                            Id = 16,
                            ClassId = 1,
                            ContactDetails = "GSM:884728672",
                            DateOfBirth = new DateTime(2006, 12, 11, 23, 40, 14, 114, DateTimeKind.Local).AddTicks(2331),
                            Email = "kiril.kolarov@gmail.com",
                            FirstName = "Kiril",
                            IsDeleted = false,
                            LastName = "Kolarov",
                            MiddleName = "Vasilev",
                            Performance = 0.0,
                            PersonalId = "5392837362",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            UserId = "e8264a26-ea76-44c4-a013-12759599a081"
                        },
                        new
                        {
                            Id = 17,
                            ClassId = 3,
                            ContactDetails = "GSM:889253738",
                            DateOfBirth = new DateTime(2002, 12, 11, 23, 40, 14, 114, DateTimeKind.Local).AddTicks(2335),
                            Email = "daniela.todorova@gmail.com",
                            FirstName = "Daniela",
                            IsDeleted = false,
                            LastName = "Todorova",
                            MiddleName = "Dimitrova",
                            Performance = 0.0,
                            PersonalId = "8282020193",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            UserId = "e0e396e6-53f2-40e9-8013-664b8a8dbd46"
                        },
                        new
                        {
                            Id = 18,
                            ClassId = 4,
                            ContactDetails = "GSM:888107316",
                            DateOfBirth = new DateTime(2003, 12, 11, 23, 40, 14, 114, DateTimeKind.Local).AddTicks(2339),
                            Email = "lazar.grigorov@gmail.com",
                            FirstName = "Lazar",
                            IsDeleted = false,
                            LastName = "Grigorov",
                            MiddleName = "Nikolov",
                            Performance = 0.0,
                            PersonalId = "9273628105",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            UserId = "b8d81f44-f8a9-43e6-83fe-e62ab38f30cf"
                        },
                        new
                        {
                            Id = 19,
                            ClassId = 2,
                            ContactDetails = "GSM:887726051",
                            DateOfBirth = new DateTime(2008, 12, 11, 23, 40, 14, 114, DateTimeKind.Local).AddTicks(2343),
                            Email = "ivanka.nikolova@gmail.com",
                            FirstName = "Ivanka",
                            IsDeleted = false,
                            LastName = "Nikolova",
                            MiddleName = "Georgieva",
                            Performance = 0.0,
                            PersonalId = "3846204951",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            UserId = "0c4b8988-22f2-4ed5-8486-85e757a97e41"
                        },
                        new
                        {
                            Id = 20,
                            ClassId = 5,
                            ContactDetails = "GSM:883467150",
                            DateOfBirth = new DateTime(2005, 12, 11, 23, 40, 14, 114, DateTimeKind.Local).AddTicks(2347),
                            Email = "gergana.georgieva@gmail.com",
                            FirstName = "Gergana",
                            IsDeleted = false,
                            LastName = "Georgieva",
                            MiddleName = "Todorova",
                            Performance = 0.0,
                            PersonalId = "1294956172",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            UserId = "3a76fd9d-a1bb-48f2-9626-1122ecf2d797"
                        });
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Teacher Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactDetails")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Teacher Contact Details");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Student Email Address");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Teacher First Name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Shows if teacher is Deleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Teacher Last Name");

                    b.Property<string>("ProfilePicturePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Path to the profile picture of the student");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasComment("School Identifier");

                    b.Property<string>("Titles")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Teacher Titles");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User Identifier");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.HasIndex("UserId");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = 21,
                            ContactDetails = "for more info visit ...",
                            Email = "stan12@gmail.com",
                            FirstName = "Stanimir",
                            IsDeleted = false,
                            LastName = "Grigorov",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            Titles = "prof. dr. ",
                            UserId = "51065229-23b9-402f-a54d-00bb813d6b1c"
                        },
                        new
                        {
                            Id = 22,
                            ContactDetails = "gsm:12345678655",
                            Email = "ivdra23@gmail.com",
                            FirstName = "Ivan",
                            IsDeleted = false,
                            LastName = "Draganov",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            Titles = "doc. ",
                            UserId = "6b6433a7-3564-4cba-ace2-4a44afca4177"
                        },
                        new
                        {
                            Id = 23,
                            ContactDetails = "gsm:0987654321",
                            Email = "mariya.petrova@gmail.com",
                            FirstName = "Mariya",
                            IsDeleted = false,
                            LastName = "Petrova",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            Titles = "assoc. prof. ",
                            UserId = "331d08d0-d407-4d61-af6e-1bb134ae7998"
                        },
                        new
                        {
                            Id = 24,
                            ContactDetails = "email: nikolai@university.com",
                            Email = "nikolai.vasilev@gmail.com",
                            FirstName = "Nikolai",
                            IsDeleted = false,
                            LastName = "Vasilev",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            Titles = "prof. dr. ",
                            UserId = "030ddabd-7dcb-46ca-bab6-3feeae3492a8"
                        },
                        new
                        {
                            Id = 25,
                            ContactDetails = "for inquiries, email me",
                            Email = "radoslav.ivanov@gmail.com",
                            FirstName = "Radoslav",
                            IsDeleted = false,
                            LastName = "Ivanov",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            Titles = "lect. ",
                            UserId = "291cc1a8-8f2c-4f48-a919-ff4d9692a859"
                        },
                        new
                        {
                            Id = 26,
                            ContactDetails = "gsm:0551237894",
                            Email = "katerina.dimitrova@gmail.com",
                            FirstName = "Katerina",
                            IsDeleted = false,
                            LastName = "Dimitrova",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            Titles = "assoc. prof. ",
                            UserId = "32739a60-8250-4178-a19c-96d90444ebd3"
                        },
                        new
                        {
                            Id = 27,
                            ContactDetails = "gsm:0876543210",
                            Email = "petar.georgiev@gmail.com",
                            FirstName = "Petar",
                            IsDeleted = false,
                            LastName = "Georgiev",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            Titles = "lect. ",
                            UserId = "3647bea5-9ce4-4d8b-bf0f-7a5fbd3ea729"
                        },
                        new
                        {
                            Id = 28,
                            ContactDetails = "email: lidia@faculty.com",
                            Email = "lidia.todorova@gmail.com",
                            FirstName = "Lidia",
                            IsDeleted = false,
                            LastName = "Todorova",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            Titles = "prof. ",
                            UserId = "2ad410b1-c108-4b9c-99f1-0f68dbd6ad45"
                        },
                        new
                        {
                            Id = 29,
                            ContactDetails = "gsm:022112233",
                            Email = "stefan.kovachev@gmail.com",
                            FirstName = "Stefan",
                            IsDeleted = false,
                            LastName = "Kovachev",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            Titles = "doc. ",
                            UserId = "04b6c6b1-5f9b-4c7a-9f42-86193c03d327"
                        },
                        new
                        {
                            Id = 30,
                            ContactDetails = "email: valentina.nikolova@edu.com",
                            Email = "valentina.nikolova@gmail.com",
                            FirstName = "Valentina",
                            IsDeleted = false,
                            LastName = "Nikolova",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            Titles = "prof. dr. ",
                            UserId = "9ab8c775-88c0-4dc3-b11d-178c3ca2129"
                        });
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("First name of the user.");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Last name of the user.");

                    b.Property<string>("PersonalId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("Personal ID is a unique identifier for each person.");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Absence", b =>
                {
                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.Student", "Student")
                        .WithMany("Аbsences")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Class", b =>
                {
                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.Teacher", "Teacher")
                        .WithMany("Classes")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.ClassCourse", b =>
                {
                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.Class", "Class")
                        .WithMany("ClassCourses")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.Course", "Course")
                        .WithMany("CourseClasses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Course", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.Teacher", "Teacher")
                        .WithMany("Courses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Publisher");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.CourseSchedule", b =>
                {
                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Grade", b =>
                {
                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.Course", "Course")
                        .WithMany("Grades")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.Student", "Student")
                        .WithMany("Grades")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.News", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Remark", b =>
                {
                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.Student", "Student")
                        .WithMany("Remarks")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Student", b =>
                {
                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.Class", "Class")
                        .WithMany("Students")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.School", "School")
                        .WithMany("Students")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("School");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Teacher", b =>
                {
                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.School", "School")
                        .WithMany("Teachers")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Class", b =>
                {
                    b.Navigation("ClassCourses");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Course", b =>
                {
                    b.Navigation("CourseClasses");

                    b.Navigation("Grades");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.School", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Student", b =>
                {
                    b.Navigation("Grades");

                    b.Navigation("Remarks");

                    b.Navigation("Аbsences");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Teacher", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
