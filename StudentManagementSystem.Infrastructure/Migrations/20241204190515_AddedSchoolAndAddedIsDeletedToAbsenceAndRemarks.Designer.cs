// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudentManagementSystem.Infrastructure;

#nullable disable

namespace StudentManagementSystem.Infrastructure.Migrations
{
    [DbContext(typeof(StudentManagementDbContext))]
    [Migration("20241204190515_AddedSchoolAndAddedIsDeletedToAbsenceAndRemarks")]
    partial class AddedSchoolAndAddedIsDeletedToAbsenceAndRemarks
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6b3a5962-c4ba-4213-a4d1-c818ae3f40e9",
                            Email = "ivan414@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVAN414@GMAIL.COM",
                            NormalizedUserName = "IVAN414@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHyEbl2KnD6e00sXNRXjpAPy9HI/BsDur/aOz5jKLUn9mpEaxdLINrSMdbAa7PkZcA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e4a54a7b-02a3-4902-bb77-ec62ded3dc34",
                            TwoFactorEnabled = false,
                            UserName = "ivan414@gmail.com"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e338a08f-ab92-4000-8279-c85cefa78639",
                            Email = "maria270@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARIA270@GMAIL.COM",
                            NormalizedUserName = "MARIA270@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOtnHbk9GHWUQ3UaAe5NyfxkHD8aXbCPKEfC3TmPVcCQukX0HWbvx3vb4PIapWJbig==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d4ec19a3-64e6-4b48-a5a8-7a5b07c9ca8b",
                            TwoFactorEnabled = false,
                            UserName = "maria270@gmail.com"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "163a5164-01a2-489f-bff9-1ad6d0764f03",
                            Email = "elena309@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ELENA309@GMAIL.COM",
                            NormalizedUserName = "ELENA309@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEuhzLt7G+SkH6IN9alIkJOXTQ7Z+FZHjmSP+UC1mpKtHi2mRB8xusubblCL7M7NTg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e78b621b-f8d7-45eb-837c-56a7fb7aebaa",
                            TwoFactorEnabled = false,
                            UserName = "elena309@gmail.com"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c0c40e92-a5ca-445e-b642-7e81338c8e48",
                            Email = "viktor725@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "VIKTOR725@GMAIL.COM",
                            NormalizedUserName = "VIKTOR725@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEK2HaRvfFRCSemaPm93NXZ+jw9tQbEu5ask+wDl+TpMeZUJEK6ZfrrtlWh5+dHCzdA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8e6448f0-ef57-4dea-85f8-51625f057b3a",
                            TwoFactorEnabled = false,
                            UserName = "viktor725@gmail.com"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5d517f8a-7a4e-465e-a546-4d691a043385",
                            Email = "pesho278@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PESHO278@GMAIL.COM",
                            NormalizedUserName = "PESHO278@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIaeANUplXuS4EKgJPXJeW3mK6BTnOptcsxOU/iK1c4M6GJrISROC8Vv4RKKOeN62w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "246a9b18-0cdd-40b2-8cac-aa2951b91aca",
                            TwoFactorEnabled = false,
                            UserName = "pesho278@gmail.com"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0156a8ca-aea6-433e-8e8c-30eb33cb84ac",
                            Email = "nina.borisova@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "NINA.BORISOVA@GMAIL.COM",
                            NormalizedUserName = "NINA.BORISOVA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBCnIfj+JksqJ3QSnzz1BcxoMGBDvuBu9dJtcNSVbfuq1AZr3QLpJY4m/uAxD3FmyA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "92ad6049-0f80-46bb-a476-5d3cc9b98ba0",
                            TwoFactorEnabled = false,
                            UserName = "nina.borisova@gmail.com"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2724bbd5-d8e3-4ab2-986c-0aedc8e123ee",
                            Email = "ivo.pavlov@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVO.PAVLOV@GMAIL.COM",
                            NormalizedUserName = "IVO.PAVLOV@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKN4Y7+KmhKgUOG1+I3TLh2ip5rZDWz6nwEsNviNG65exkuFU4OP6PsSDJlI5GadGg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ccde491e-f11f-4681-b020-edbdc2df6ec5",
                            TwoFactorEnabled = false,
                            UserName = "ivo.pavlov@gmail.com"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b3256ea3-8f69-4eda-a7f2-44fe82b15746",
                            Email = "katerina.gancheva@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "KATERINA.GANCHEVA@GMAIL.COM",
                            NormalizedUserName = "KATERINA.GANCHEVA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEP3fUkfyXmw+jPdDFkqKic83xZxcn6VdzE0Vyjy7cgXsa3IqKlxeSg1xohgXWIdePQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cabe2ec6-5284-498f-b8a5-786524e700bd",
                            TwoFactorEnabled = false,
                            UserName = "katerina.gancheva@gmail.com"
                        },
                        new
                        {
                            Id = "9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b79dfea8-f244-4970-8eae-ea412c2b9013",
                            Email = "dimitar.mihailov@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DIMITAR.MIHAILOV@GMAIL.COM",
                            NormalizedUserName = "DIMITAR.MIHAILOV@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENgEZW9bNRy53ekKL/WPC/9FV8+QwVdnZhLj5+T13PBect77ko7UyGYBCbf6osmPfA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "12570ae5-2e09-432e-a1b6-99477239b002",
                            TwoFactorEnabled = false,
                            UserName = "dimitar.mihailov@gmail.com"
                        },
                        new
                        {
                            Id = "10",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "659c090d-f4d6-4be1-9bc7-fc67428fdc75",
                            Email = "stefan.yordanov@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STEFAN.YORDANOV@GMAIL.COM",
                            NormalizedUserName = "STEFAN.YORDANOV@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEH4UtuyCeeaa3/eDZfjttJQsJCzfoGPqYn1kjX9Uafeum7YkN+yavpSSkpcuYX/0Tw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d1d6d4b4-fa90-4223-be3f-3d478aa122a2",
                            TwoFactorEnabled = false,
                            UserName = "stefan.yordanov@gmail.com"
                        },
                        new
                        {
                            Id = "11",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bea24560-0cab-4764-a52c-12094a2f61cb",
                            Email = "diana.ruseva@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DIANA.RUSEVA@GMAIL.COM",
                            NormalizedUserName = "DIANA.RUSEVA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDUgAG+KDCPkZKWui0Itsf9LH4dgZTWOjLQox53LqXVLHj1aoZiGHEWDwv4H83iNgw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e5d4cee7-8f04-4aa4-b941-f3e0447a4b3c",
                            TwoFactorEnabled = false,
                            UserName = "diana.ruseva@gmail.com"
                        },
                        new
                        {
                            Id = "12",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "05e2645b-8159-43e9-a08a-bb8eb9b3121e",
                            Email = "petar.georgiev@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PETAR.GEORGIEV@GMAIL.COM",
                            NormalizedUserName = "PETAR.GEORGIEV@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAZ2kVaRSYw/99MkJrt9mbSe2Yucmo3n/8GKwz+drCh74np7/TqUBUkreUwlZqF9Aw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1480f1f7-8f1c-45ac-81f0-f45ab918dcf5",
                            TwoFactorEnabled = false,
                            UserName = "petar.georgiev@gmail.com"
                        },
                        new
                        {
                            Id = "13",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "24de44e5-9676-4018-a78c-b0232de6775e",
                            Email = "tanya.ivanova@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TANYA.IVANOVA@GMAIL.COM",
                            NormalizedUserName = "TANYA.IVANOVA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEF/JI/dQJYQXz784HgrZIfl5a9c6u61w5HbLEnccpXeeyJYwz02JC7O4eosE+1ihrQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ab811866-d3d5-4c18-a6b9-3e2c821d316e",
                            TwoFactorEnabled = false,
                            UserName = "tanya.ivanova@gmail.com"
                        },
                        new
                        {
                            Id = "14",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ccaab036-dc5b-4f29-83f5-d80f6a760fab",
                            Email = "aleksandar.pavlov@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALEKSANDAR.PAVLOV@GMAIL.COM",
                            NormalizedUserName = "ALEKSANDAR.PAVLOV@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHuRV8UKFsvYvq2YSOl9RM9p8iznEiBGhLcqLgDIH0/76nwKPmUzB2KdjrgmoN4log==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f7f53a27-b370-454c-88f8-255944c78a4e",
                            TwoFactorEnabled = false,
                            UserName = "aleksandar.pavlov@gmail.com"
                        },
                        new
                        {
                            Id = "15",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "33c0c38f-1788-4eb9-beba-d563f19b4bdc",
                            Email = "julia.dimitrova@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JULIA.DIMITROVA@GMAIL.COM",
                            NormalizedUserName = "JULIA.DIMITROVA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDWKjA4pZYm7AdsFARcWonCKqHeXthaBjm+d4zHap7Q6p9abzLbUbC+532bf2Zn8NQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bc1dcddd-9433-4228-a279-fba63ee979b4",
                            TwoFactorEnabled = false,
                            UserName = "julia.dimitrova@gmail.com"
                        },
                        new
                        {
                            Id = "16",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e82b821e-0237-43b9-bd47-e82f0f6e2d9d",
                            Email = "kiril.kolarov@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "KIRIL.KOLAROV@GMAIL.COM",
                            NormalizedUserName = "KIRIL.KOLAROV@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEH6T1sET2Y6AYorwA7d9Gq+ZPquGCtkpnAVRwk8e0n2xhOAyOTNss2mZpL7PLZOZBw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "37260788-c66d-4743-8307-71f96dac2a48",
                            TwoFactorEnabled = false,
                            UserName = "kiril.kolarov@gmail.com"
                        },
                        new
                        {
                            Id = "17",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c7ce8f6e-188f-40d8-be3c-27aa33fb85cb",
                            Email = "daniela.todorova@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DANIELA.TODOROVA@GMAIL.COM",
                            NormalizedUserName = "DANIELA.TODOROVA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENW6NsWSRZi+yzFNHz6Q2xUmIeQXcXgE6J2SLuCXOFqJ5GIsL9vqFCoMeNOin8Zu+A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f0048fda-111d-4790-93c2-6a0ed4a1744d",
                            TwoFactorEnabled = false,
                            UserName = "daniela.todorova@gmail.com"
                        },
                        new
                        {
                            Id = "18",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3ec58298-aac4-4dc8-822e-b6725ac22e35",
                            Email = "lazar.grigorov@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "LAZAR.GRIGOROV@GMAIL.COM",
                            NormalizedUserName = "LAZAR.GRIGOROV@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEHkwJCQbRhITxpmnUe09QGGJDUTtwVDmtKI4bcle2xgyJhCHoYVIssU8yQo462UEA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "942b800b-567f-4754-b81d-936e8de87a34",
                            TwoFactorEnabled = false,
                            UserName = "lazar.grigorov@gmail.com"
                        },
                        new
                        {
                            Id = "19",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b61b154d-2b0c-46a5-9215-e1dfe0b7d5a9",
                            Email = "ivanka.nikolova@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVANKA.NIKOLOVA@GMAIL.COM",
                            NormalizedUserName = "IVANKA.NIKOLOVA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGMdMIEWK6hTy2grPwmTX7nOp3GjI0EghWBpRWgZm81fKGsUCLNao3lFfzcGnxTwHg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e1c4d1dd-1381-4c74-b6d9-fc9beb5e699a",
                            TwoFactorEnabled = false,
                            UserName = "ivanka.nikolova@gmail.com"
                        },
                        new
                        {
                            Id = "20",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "71f09cfd-74d5-4764-816e-c74684c3ff20",
                            Email = "gergana.georgieva@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "GERGANA.GEORGIEVA@GMAIL.COM",
                            NormalizedUserName = "GERGANA.GEORGIEVA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDNY2CLMIMwcv9CDaRWYmEnOo/6O7Tlbpex/7JJXLEcX42WsCb6vO4mD/fujMNIa8w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "24801eee-f6fa-49c1-b19b-106524704cad",
                            TwoFactorEnabled = false,
                            UserName = "gergana.georgieva@gmail.com"
                        },
                        new
                        {
                            Id = "21",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8ea82a04-1f15-46ae-8ac1-8e70c04f6688",
                            Email = "stan12@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STAN12@GMAIL.COM",
                            NormalizedUserName = "STAN12@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKdRFxm0mW2oZyE83iIUDJm9TrXa6UI57aicJ9KgMSz6yUptrvxOG91DlpC2Zec24A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "stan12@gmail.com"
                        },
                        new
                        {
                            Id = "22",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fe00fae0-c40b-403f-94c7-e133aa1a88ec",
                            Email = "ivdra23@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVDRA23@GMAIL.COM",
                            NormalizedUserName = "IVDRA23@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGt5Kdw3ywlmgh6mIyuzs7G7dC3kF4m/pT3GV2rY4yrjz366D/OyxqwYvpcbx7nfRw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "ivdra23@gmail.com"
                        },
                        new
                        {
                            Id = "23",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "86cc5c11-532d-4543-93da-f2c3c4261e47",
                            Email = "mariya.petrova@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARIYA.PETROVA@GMAIL.COM",
                            NormalizedUserName = "MARIYA.PETROVA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAdHWig8rVbHVM2SPaoiLw5sMOB8bHttR0CgqUf30uGLDx94uBHZMlh+WwM1tgIPiA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "mariya.petrova@gmail.com"
                        },
                        new
                        {
                            Id = "24",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "498ff5d6-a1da-4371-8a0d-2a6e52e05a56",
                            Email = "nikolai.vasilev@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "NIKOLAI.VASILEV@GMAIL.COM",
                            NormalizedUserName = "NIKOLAI.VASILEV@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEB04fGz+GRT+v+oTM1FuYWeYhgd9P7Pc2k7J2VnqGkN5Pr/CvCzMtAmHwT1zx1vKAQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "nikolai.vasilev@gmail.com"
                        },
                        new
                        {
                            Id = "25",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "469f29ef-09dc-449f-aa11-1ea15443af43",
                            Email = "radoslav.ivanov@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "RADOSLAV.IVANOV@GMAIL.COM",
                            NormalizedUserName = "RADOSLAV.IVANOV@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGh2BjuqNUv9QuUPtv1yo5CN7TN1BqNtBq03+/zlz4GYsg4OifGM3DPGXxEzoMOhig==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "radoslav.ivanov@gmail.com"
                        },
                        new
                        {
                            Id = "26",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "84750334-c996-4aba-a9b1-108875d4be7b",
                            Email = "katerina.dimitrova@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "KATERINA.DIMITROVA@GMAIL.COM",
                            NormalizedUserName = "KATERINA.DIMITROVA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPddRTikl/9+PpxOZ/MXCHWV1jWOBHk4qMv9OTZzY8CR5BInHFO3Tp/AJYY6a+KbYA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "katerina.dimitrova@gmail.com"
                        },
                        new
                        {
                            Id = "27",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "73b57e5f-8e1c-4989-a151-a48eb97e8284",
                            Email = "gosho.georgiev@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "GOSHO.GEORGIEV@GMAIL.COM",
                            NormalizedUserName = "GOSHO.GEORGIEV@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHWb1BuAcQgLKYWCCSY9Yy9FAjf189lt8VkHdFXFJ7+/L9X4Rxr4iA/7W782elU6zg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "gosho.georgiev@gmail.com"
                        },
                        new
                        {
                            Id = "28",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "21aa7482-3419-4747-b1fa-75eb1e5f0917",
                            Email = "lidia.todorova@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "LIDIA.TODOROVA@GMAIL.COM",
                            NormalizedUserName = "LIDIA.TODOROVA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEE0Y3q1e/4Urk3jasRODpBNbsFRDGvb5WTza3JPnjt8mpT/Pc1/FjPSoUHDt44ePiw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "lidia.todorova@gmail.com"
                        },
                        new
                        {
                            Id = "29",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e09b83b3-c7b4-483c-907a-6d773096c95f",
                            Email = "stefan.kovachev@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STEFAN.KOVACHEV@GMAIL.COM",
                            NormalizedUserName = "STEFAN.KOVACHEV@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEA14AfhH0Wcfu5vWUcKwHU4cY6C9oryPBjlzbW9K/ZhGJZxk7KbOTGLVdee/tk/tkw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "stefan.kovachev@gmail.com"
                        },
                        new
                        {
                            Id = "30",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f328d513-3418-41e5-a1c4-0e836fc92aae",
                            Email = "valentina.nikolova@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "VALENTINA.NIKOLOVA@GMAIL.COM",
                            NormalizedUserName = "VALENTINA.NIKOLOVA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJXXTSD5zkQTJAPiQxWQ6zQUGnK0FIOVVSrZ/2jUdcDIf3sw+SVXDrxFsdMNIJhScQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "valentina.nikolova@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Absence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Absence Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasComment("Course Identifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasComment("Date of Absence");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Shows if absence is Deleted");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasComment("Student Identifier");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("Absences");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Shows if class is Deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("The name of the class");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int")
                        .HasComment("The ID of the teacher for this class");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Classes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "10b",
                            TeacherId = 21
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "9a",
                            TeacherId = 22
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "11c",
                            TeacherId = 23
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            Name = "12a",
                            TeacherId = 24
                        },
                        new
                        {
                            Id = 5,
                            IsDeleted = false,
                            Name = "8b",
                            TeacherId = 25
                        },
                        new
                        {
                            Id = 6,
                            IsDeleted = false,
                            Name = "7a",
                            TeacherId = 26
                        },
                        new
                        {
                            Id = 7,
                            IsDeleted = false,
                            Name = "6c",
                            TeacherId = 27
                        },
                        new
                        {
                            Id = 8,
                            IsDeleted = false,
                            Name = "10a",
                            TeacherId = 28
                        },
                        new
                        {
                            Id = 9,
                            IsDeleted = false,
                            Name = "9b",
                            TeacherId = 29
                        },
                        new
                        {
                            Id = 10,
                            IsDeleted = false,
                            Name = "11a",
                            TeacherId = 30
                        });
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.ClassCourse", b =>
                {
                    b.Property<int>("ClassId")
                        .HasColumnType("int")
                        .HasComment("Class Identifier");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasComment("Course Identifier");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date of enrollment");

                    b.HasKey("ClassId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("ClassCourses");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Course Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Course Description");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasComment("Course End Date");

                    b.Property<int>("EnrollmentCap")
                        .HasColumnType("int")
                        .HasComment("Maximum number of students allowed");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Shows if course is Deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Course Name");

                    b.Property<string>("PublisherId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Publisher Identification");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasComment("Course Start Date");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int")
                        .HasComment("Teacher of the Course");

                    b.HasKey("Id");

                    b.HasIndex("PublisherId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Best biology learning system in the world",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnrollmentCap = 0,
                            IsDeleted = false,
                            Name = "Biology",
                            PublisherId = "1",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TeacherId = 21
                        },
                        new
                        {
                            Id = 2,
                            Description = "Best history learning system in the world",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnrollmentCap = 0,
                            IsDeleted = false,
                            Name = "History",
                            PublisherId = "1",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TeacherId = 22
                        },
                        new
                        {
                            Id = 3,
                            Description = "Comprehensive mathematics curriculum for all levels",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnrollmentCap = 0,
                            IsDeleted = false,
                            Name = "Mathematics",
                            PublisherId = "2",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TeacherId = 23
                        },
                        new
                        {
                            Id = 4,
                            Description = "Advanced physics concepts and practical applications",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnrollmentCap = 0,
                            IsDeleted = false,
                            Name = "Physics",
                            PublisherId = "2",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TeacherId = 24
                        },
                        new
                        {
                            Id = 5,
                            Description = "Exploring the fundamentals of chemistry",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnrollmentCap = 0,
                            IsDeleted = false,
                            Name = "Chemistry",
                            PublisherId = "3",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TeacherId = 25
                        },
                        new
                        {
                            Id = 6,
                            Description = "In-depth analysis of classic and modern literature",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnrollmentCap = 0,
                            IsDeleted = false,
                            Name = "English Literature",
                            PublisherId = "3",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TeacherId = 26
                        },
                        new
                        {
                            Id = 7,
                            Description = "Programming, algorithms, and computing fundamentals",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnrollmentCap = 0,
                            IsDeleted = false,
                            Name = "Computer Science",
                            PublisherId = "4",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TeacherId = 27
                        },
                        new
                        {
                            Id = 8,
                            Description = "Understanding economic systems, theories, and policies",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnrollmentCap = 0,
                            IsDeleted = false,
                            Name = "Economics",
                            PublisherId = "4",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TeacherId = 28
                        },
                        new
                        {
                            Id = 9,
                            Description = "Exploring the earth's physical features and human geography",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnrollmentCap = 0,
                            IsDeleted = false,
                            Name = "Geography",
                            PublisherId = "5",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TeacherId = 29
                        },
                        new
                        {
                            Id = 10,
                            Description = "The study of art movements, artists, and their works",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnrollmentCap = 0,
                            IsDeleted = false,
                            Name = "Art History",
                            PublisherId = "5",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TeacherId = 30
                        });
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique Identifier for the Grade entry");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasComment("Identifier of the Course");

                    b.Property<DateTime>("GradeAssignedDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date when the grade was assigned");

                    b.Property<double>("GradeScore")
                        .HasColumnType("float")
                        .HasComment("Grade received by the student for a specific course assessment");

                    b.Property<string>("GradeType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Description or type of the grade (e.g., Midterm, Final, Homework)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Shows if grade is Deleted");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasComment("Identifier of the Student");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("News Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("News Content");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasComment("News Date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Shows if news is Deleted");

                    b.Property<string>("PublisherId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Publisher Identifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("News Title");

                    b.HasKey("Id");

                    b.HasIndex("PublisherId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Remark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Remark Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasComment("Course Identifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Shows if remark is Deleted");

                    b.Property<string>("RemarkText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Remark Text");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasComment("Student Identifier");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int")
                        .HasComment("Teacher Identifier");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Remarks");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("School Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("School Name");

                    b.HasKey("Id");

                    b.ToTable("Schools");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "School of Mathematics"
                        },
                        new
                        {
                            Id = 2,
                            Name = "School of Physics"
                        },
                        new
                        {
                            Id = 3,
                            Name = "School of Chemistry"
                        },
                        new
                        {
                            Id = 4,
                            Name = "School of Biology"
                        },
                        new
                        {
                            Id = 5,
                            Name = "School of Computer Science"
                        },
                        new
                        {
                            Id = 6,
                            Name = "School of Economics"
                        },
                        new
                        {
                            Id = 7,
                            Name = "School of Law"
                        },
                        new
                        {
                            Id = 8,
                            Name = "School of Medicine"
                        },
                        new
                        {
                            Id = 9,
                            Name = "School of Philosophy"
                        },
                        new
                        {
                            Id = 10,
                            Name = "School of History"
                        });
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Student Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassId")
                        .HasColumnType("int")
                        .HasComment("Class Identifier");

                    b.Property<string>("ContactDetails")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Student Contact Details");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasComment("Date of birth of Student");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Student Email Address");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Student First Name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Shows if student is Deleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Student Last Name");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Student Middle Name");

                    b.Property<double>("Performance")
                        .HasColumnType("float")
                        .HasComment("Student Performance");

                    b.Property<string>("PersonalId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("Student Personal Identification Number");

                    b.Property<string>("ProfilePicturePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Path to the profile picture of the student");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasComment("School Identifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User Identifier");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("UserId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClassId = 3,
                            ContactDetails = "GSM:882163890",
                            DateOfBirth = new DateTime(2006, 12, 4, 21, 5, 14, 86, DateTimeKind.Local).AddTicks(1058),
                            Email = "ivan414@gmail.com",
                            FirstName = "Ivan",
                            IsDeleted = false,
                            LastName = "Petrov",
                            MiddleName = "Grigorov",
                            Performance = 0.0,
                            PersonalId = "9564039305",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            UserId = "1"
                        },
                        new
                        {
                            Id = 2,
                            ClassId = 5,
                            ContactDetails = "GSM:889556992",
                            DateOfBirth = new DateTime(2007, 12, 4, 21, 5, 14, 86, DateTimeKind.Local).AddTicks(1125),
                            Email = "maria270@gmail.com",
                            FirstName = "Maria",
                            IsDeleted = false,
                            LastName = "Grigorov",
                            MiddleName = "Georgiev",
                            Performance = 0.0,
                            PersonalId = "6934567210",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            UserId = "2"
                        },
                        new
                        {
                            Id = 3,
                            ClassId = 5,
                            ContactDetails = "GSM:883854732",
                            DateOfBirth = new DateTime(2007, 12, 4, 21, 5, 14, 86, DateTimeKind.Local).AddTicks(1131),
                            Email = "elena309@gmail.com",
                            FirstName = "Elena",
                            IsDeleted = false,
                            LastName = "Todorov",
                            MiddleName = "Grigorov",
                            Performance = 0.0,
                            PersonalId = "3699302616",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            UserId = "3"
                        },
                        new
                        {
                            Id = 4,
                            ClassId = 4,
                            ContactDetails = "GSM:886992374",
                            DateOfBirth = new DateTime(2006, 12, 4, 21, 5, 14, 86, DateTimeKind.Local).AddTicks(1146),
                            Email = "viktor725@gmail.com",
                            FirstName = "Viktor",
                            IsDeleted = false,
                            LastName = "Todorov",
                            MiddleName = "Todorov",
                            Performance = 0.0,
                            PersonalId = "2940063663",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            UserId = "4"
                        },
                        new
                        {
                            Id = 5,
                            ClassId = 2,
                            ContactDetails = "GSM:884738222",
                            DateOfBirth = new DateTime(2008, 12, 4, 21, 5, 14, 86, DateTimeKind.Local).AddTicks(1151),
                            Email = "pesho278@gmail.com",
                            FirstName = "Pesho",
                            IsDeleted = false,
                            LastName = "Nikolov",
                            MiddleName = "Nikolov",
                            Performance = 0.0,
                            PersonalId = "4204190914",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            UserId = "5"
                        },
                        new
                        {
                            Id = 6,
                            ClassId = 1,
                            ContactDetails = "GSM:888183734",
                            DateOfBirth = new DateTime(2005, 12, 4, 21, 5, 14, 86, DateTimeKind.Local).AddTicks(1155),
                            Email = "nina.borisova@gmail.com",
                            FirstName = "Nina",
                            IsDeleted = false,
                            LastName = "Todorova",
                            MiddleName = "Borisova",
                            Performance = 0.0,
                            PersonalId = "5392831842",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            UserId = "6"
                        },
                        new
                        {
                            Id = 7,
                            ClassId = 1,
                            ContactDetails = "GSM:883764543",
                            DateOfBirth = new DateTime(2004, 12, 4, 21, 5, 14, 86, DateTimeKind.Local).AddTicks(1170),
                            Email = "ivo.pavlov@gmail.com",
                            FirstName = "Ivo",
                            IsDeleted = false,
                            LastName = "Pavlov",
                            MiddleName = "Petrov",
                            Performance = 0.0,
                            PersonalId = "6758374932",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            UserId = "7"
                        },
                        new
                        {
                            Id = 8,
                            ClassId = 3,
                            ContactDetails = "GSM:882847361",
                            DateOfBirth = new DateTime(2003, 12, 4, 21, 5, 14, 86, DateTimeKind.Local).AddTicks(1174),
                            Email = "katerina.gancheva@gmail.com",
                            FirstName = "Katerina",
                            IsDeleted = false,
                            LastName = "Gancheva",
                            MiddleName = "Alexandrova",
                            Performance = 0.0,
                            PersonalId = "8293840598",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            UserId = "8"
                        },
                        new
                        {
                            Id = 9,
                            ClassId = 4,
                            ContactDetails = "GSM:887654321",
                            DateOfBirth = new DateTime(2002, 12, 4, 21, 5, 14, 86, DateTimeKind.Local).AddTicks(1182),
                            Email = "dimitar.mihailov@gmail.com",
                            FirstName = "Dimitar",
                            IsDeleted = false,
                            LastName = "Mihailov",
                            MiddleName = "Georgiev",
                            Performance = 0.0,
                            PersonalId = "9382843621",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            UserId = "9"
                        },
                        new
                        {
                            Id = 10,
                            ClassId = 5,
                            ContactDetails = "GSM:885676543",
                            DateOfBirth = new DateTime(2001, 12, 4, 21, 5, 14, 86, DateTimeKind.Local).AddTicks(1187),
                            Email = "stefan.yordanov@gmail.com",
                            FirstName = "Stefan",
                            IsDeleted = false,
                            LastName = "Yordanov",
                            MiddleName = "Ivanov",
                            Performance = 0.0,
                            PersonalId = "4902385726",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            UserId = "10"
                        },
                        new
                        {
                            Id = 11,
                            ClassId = 2,
                            ContactDetails = "GSM:882364788",
                            DateOfBirth = new DateTime(2004, 12, 4, 21, 5, 14, 86, DateTimeKind.Local).AddTicks(1194),
                            Email = "diana.ruseva@gmail.com",
                            FirstName = "Diana",
                            IsDeleted = false,
                            LastName = "Ruseva",
                            MiddleName = "Stoyanova",
                            Performance = 0.0,
                            PersonalId = "2945641207",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            UserId = "11"
                        },
                        new
                        {
                            Id = 12,
                            ClassId = 3,
                            ContactDetails = "GSM:889276400",
                            DateOfBirth = new DateTime(2003, 12, 4, 21, 5, 14, 86, DateTimeKind.Local).AddTicks(1198),
                            Email = "petar.georgiev@gmail.com",
                            FirstName = "Petar",
                            IsDeleted = false,
                            LastName = "Georgiev",
                            MiddleName = "Zahariev",
                            Performance = 0.0,
                            PersonalId = "1298345761",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            UserId = "12"
                        },
                        new
                        {
                            Id = 13,
                            ClassId = 4,
                            ContactDetails = "GSM:883712508",
                            DateOfBirth = new DateTime(2005, 12, 4, 21, 5, 14, 86, DateTimeKind.Local).AddTicks(1203),
                            Email = "tanya.ivanova@gmail.com",
                            FirstName = "Tanya",
                            IsDeleted = false,
                            LastName = "Ivanova",
                            MiddleName = "Vasileva",
                            Performance = 0.0,
                            PersonalId = "8471629304",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            UserId = "13"
                        },
                        new
                        {
                            Id = 14,
                            ClassId = 2,
                            ContactDetails = "GSM:887327015",
                            DateOfBirth = new DateTime(2006, 12, 4, 21, 5, 14, 86, DateTimeKind.Local).AddTicks(1207),
                            Email = "aleksandar.pavlov@gmail.com",
                            FirstName = "Aleksandar",
                            IsDeleted = false,
                            LastName = "Pavlov",
                            MiddleName = "Dimitrov",
                            Performance = 0.0,
                            PersonalId = "6503849201",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            UserId = "14"
                        },
                        new
                        {
                            Id = 15,
                            ClassId = 5,
                            ContactDetails = "GSM:888014697",
                            DateOfBirth = new DateTime(2004, 12, 4, 21, 5, 14, 86, DateTimeKind.Local).AddTicks(1211),
                            Email = "julia.dimitrova@gmail.com",
                            FirstName = "Julia",
                            IsDeleted = false,
                            LastName = "Dimitrova",
                            MiddleName = "Borisova",
                            Performance = 0.0,
                            PersonalId = "8473926140",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            UserId = "15"
                        },
                        new
                        {
                            Id = 16,
                            ClassId = 1,
                            ContactDetails = "GSM:884728672",
                            DateOfBirth = new DateTime(2006, 12, 4, 21, 5, 14, 86, DateTimeKind.Local).AddTicks(1231),
                            Email = "kiril.kolarov@gmail.com",
                            FirstName = "Kiril",
                            IsDeleted = false,
                            LastName = "Kolarov",
                            MiddleName = "Vasilev",
                            Performance = 0.0,
                            PersonalId = "5392837362",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            UserId = "16"
                        },
                        new
                        {
                            Id = 17,
                            ClassId = 3,
                            ContactDetails = "GSM:889253738",
                            DateOfBirth = new DateTime(2002, 12, 4, 21, 5, 14, 86, DateTimeKind.Local).AddTicks(1235),
                            Email = "daniela.todorova@gmail.com",
                            FirstName = "Daniela",
                            IsDeleted = false,
                            LastName = "Todorova",
                            MiddleName = "Dimitrova",
                            Performance = 0.0,
                            PersonalId = "8282020193",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            UserId = "17"
                        },
                        new
                        {
                            Id = 18,
                            ClassId = 4,
                            ContactDetails = "GSM:888107316",
                            DateOfBirth = new DateTime(2003, 12, 4, 21, 5, 14, 86, DateTimeKind.Local).AddTicks(1239),
                            Email = "lazar.grigorov@gmail.com",
                            FirstName = "Lazar",
                            IsDeleted = false,
                            LastName = "Grigorov",
                            MiddleName = "Nikolov",
                            Performance = 0.0,
                            PersonalId = "9273628105",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            UserId = "18"
                        },
                        new
                        {
                            Id = 19,
                            ClassId = 2,
                            ContactDetails = "GSM:887726051",
                            DateOfBirth = new DateTime(2008, 12, 4, 21, 5, 14, 86, DateTimeKind.Local).AddTicks(1243),
                            Email = "ivanka.nikolova@gmail.com",
                            FirstName = "Ivanka",
                            IsDeleted = false,
                            LastName = "Nikolova",
                            MiddleName = "Georgieva",
                            Performance = 0.0,
                            PersonalId = "3846204951",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            UserId = "19"
                        },
                        new
                        {
                            Id = 20,
                            ClassId = 5,
                            ContactDetails = "GSM:883467150",
                            DateOfBirth = new DateTime(2005, 12, 4, 21, 5, 14, 86, DateTimeKind.Local).AddTicks(1248),
                            Email = "gergana.georgieva@gmail.com",
                            FirstName = "Gergana",
                            IsDeleted = false,
                            LastName = "Georgieva",
                            MiddleName = "Todorova",
                            Performance = 0.0,
                            PersonalId = "1294956172",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            UserId = "20"
                        });
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Teacher Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactDetails")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Teacher Contact Details");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Student Email Address");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Teacher First Name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Shows if teacher is Deleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Teacher Last Name");

                    b.Property<string>("ProfilePicturePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Path to the profile picture of the student");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasComment("School Identifier");

                    b.Property<string>("Titles")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Teacher Titles");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User Identifier");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.HasIndex("UserId");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = 21,
                            ContactDetails = "for more info visit ...",
                            Email = "stan12@gmail.com",
                            FirstName = "Stanimir",
                            IsDeleted = false,
                            LastName = "Grigorov",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            Titles = "prof. dr. ",
                            UserId = "21"
                        },
                        new
                        {
                            Id = 22,
                            ContactDetails = "gsm:12345678655",
                            Email = "ivdra23@gmail.com",
                            FirstName = "Ivan",
                            IsDeleted = false,
                            LastName = "Draganov",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            Titles = "doc. ",
                            UserId = "22"
                        },
                        new
                        {
                            Id = 23,
                            ContactDetails = "gsm:0987654321",
                            Email = "mariya.petrova@gmail.com",
                            FirstName = "Mariya",
                            IsDeleted = false,
                            LastName = "Petrova",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            Titles = "assoc. prof. ",
                            UserId = "23"
                        },
                        new
                        {
                            Id = 24,
                            ContactDetails = "email: nikolai@university.com",
                            Email = "nikolai.vasilev@gmail.com",
                            FirstName = "Nikolai",
                            IsDeleted = false,
                            LastName = "Vasilev",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            Titles = "prof. dr. ",
                            UserId = "24"
                        },
                        new
                        {
                            Id = 25,
                            ContactDetails = "for inquiries, email me",
                            Email = "radoslav.ivanov@gmail.com",
                            FirstName = "Radoslav",
                            IsDeleted = false,
                            LastName = "Ivanov",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            Titles = "lect. ",
                            UserId = "25"
                        },
                        new
                        {
                            Id = 26,
                            ContactDetails = "gsm:0551237894",
                            Email = "katerina.dimitrova@gmail.com",
                            FirstName = "Katerina",
                            IsDeleted = false,
                            LastName = "Dimitrova",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            Titles = "assoc. prof. ",
                            UserId = "26"
                        },
                        new
                        {
                            Id = 27,
                            ContactDetails = "gsm:0876543210",
                            Email = "petar.georgiev@gmail.com",
                            FirstName = "Petar",
                            IsDeleted = false,
                            LastName = "Georgiev",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            Titles = "lect. ",
                            UserId = "27"
                        },
                        new
                        {
                            Id = 28,
                            ContactDetails = "email: lidia@faculty.com",
                            Email = "lidia.todorova@gmail.com",
                            FirstName = "Lidia",
                            IsDeleted = false,
                            LastName = "Todorova",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            Titles = "prof. ",
                            UserId = "28"
                        },
                        new
                        {
                            Id = 29,
                            ContactDetails = "gsm:022112233",
                            Email = "stefan.kovachev@gmail.com",
                            FirstName = "Stefan",
                            IsDeleted = false,
                            LastName = "Kovachev",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            Titles = "doc. ",
                            UserId = "29"
                        },
                        new
                        {
                            Id = 30,
                            ContactDetails = "email: valentina.nikolova@edu.com",
                            Email = "valentina.nikolova@gmail.com",
                            FirstName = "Valentina",
                            IsDeleted = false,
                            LastName = "Nikolova",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            Titles = "prof. dr. ",
                            UserId = "30"
                        });
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("First name of the user.");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Last name of the user.");

                    b.Property<string>("PersonalId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("Personal ID is a unique identifier for each person.");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Absence", b =>
                {
                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.Student", "Student")
                        .WithMany("Аbsences")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Class", b =>
                {
                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.Teacher", "Teacher")
                        .WithMany("Classes")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.ClassCourse", b =>
                {
                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.Class", "Class")
                        .WithMany("ClassCourses")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.Course", "Course")
                        .WithMany("CourseClasses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Course", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.Teacher", "Teacher")
                        .WithMany("Courses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Publisher");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Grade", b =>
                {
                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.Course", "Course")
                        .WithMany("Grades")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.Student", "Student")
                        .WithMany("Grades")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.News", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Remark", b =>
                {
                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.Student", "Student")
                        .WithMany("Remarks")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Student", b =>
                {
                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.Class", "Class")
                        .WithMany("Students")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.School", "School")
                        .WithMany("Students")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("School");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Teacher", b =>
                {
                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.School", "School")
                        .WithMany("Teachers")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Class", b =>
                {
                    b.Navigation("ClassCourses");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Course", b =>
                {
                    b.Navigation("CourseClasses");

                    b.Navigation("Grades");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.School", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Student", b =>
                {
                    b.Navigation("Grades");

                    b.Navigation("Remarks");

                    b.Navigation("Аbsences");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Teacher", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
