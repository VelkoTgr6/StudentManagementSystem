// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudentManagementSystem.Infrastructure;

#nullable disable

namespace StudentManagementSystem.Infrastructure.Migrations
{
    [DbContext(typeof(StudentManagementDbContext))]
    [Migration("20241206221116_UpdatedStudentAndTeacherUserIdConfigurationToMatchToEntityUserAndAddedDateToRemark")]
    partial class UpdatedStudentAndTeacherUserIdConfigurationToMatchToEntityUserAndAddedDateToRemark
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = "aa7d01c6-9499-4ed4-a38e-3d0afa2b707c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6c9c73ca-deea-4fd7-848f-389a2cded275",
                            Email = "ivan414@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVAN414@GMAIL.COM",
                            NormalizedUserName = "IVAN414@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDLSsQb5h95pGMIAKpLKEh+HJRrpuQuQarf0/gY8Ec7NWe2YVhmKwUOsKSqeRnrlRA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5fbfb1ff-8247-4948-8171-abac0cba2c65",
                            TwoFactorEnabled = false,
                            UserName = "ivan414@gmail.com"
                        },
                        new
                        {
                            Id = "f2875100-0cf1-4b1d-ba91-1dfa38690f84",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "38c81ea7-803a-488a-be3f-32d0ee6a9309",
                            Email = "maria270@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARIA270@GMAIL.COM",
                            NormalizedUserName = "MARIA270@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENSiyJxS9uHM2r6QfcvpCF0EM8gzMK4ak+3COc4VO1MiFeksIRLj7EauL4zKwMOdrg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bd044334-f1bb-43c1-9fd0-99c2d4cb61c7",
                            TwoFactorEnabled = false,
                            UserName = "maria270@gmail.com"
                        },
                        new
                        {
                            Id = "b65e6163-1454-4164-9869-2ff822f9da98",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a0ca5c7e-58de-49fd-935e-fd550162b1b7",
                            Email = "elena309@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ELENA309@GMAIL.COM",
                            NormalizedUserName = "ELENA309@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMdZOB0UrZ7/woEwg0q4DVNBqwmlKDX9hc2CyScKWI0OgqQZWpyUN106rXKElsq51w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "249b7092-01ca-4c22-b7f0-513160250b56",
                            TwoFactorEnabled = false,
                            UserName = "elena309@gmail.com"
                        },
                        new
                        {
                            Id = "c5d7d80f-08d5-41ec-892c-30833098c047",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "084dea89-73d5-40bc-9fd6-c01ec1228f1f",
                            Email = "viktor725@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "VIKTOR725@GMAIL.COM",
                            NormalizedUserName = "VIKTOR725@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJPORejjBwVz+sUFGl5sOAYrxjjhkA/+aCgfDmmZjm1+5NuOh7TC18TBCbR331bb4Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e1f90d09-64a1-4ca3-9ce3-1b06ad1c392a",
                            TwoFactorEnabled = false,
                            UserName = "viktor725@gmail.com"
                        },
                        new
                        {
                            Id = "217e3e65-026d-4a8e-97af-a4fb30dfab30",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "57538733-9d42-4a23-80a9-9f79738c66ff",
                            Email = "pesho278@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PESHO278@GMAIL.COM",
                            NormalizedUserName = "PESHO278@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBjEvPYpeuvbSHy0vDkvl7XujHpPU1iyBo7pw8Xc+1Czci2L/zJNueLCwzp2RsnEOA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c777ddc7-0ee9-4bb4-b220-b846508edd1f",
                            TwoFactorEnabled = false,
                            UserName = "pesho278@gmail.com"
                        },
                        new
                        {
                            Id = "8f7bca8f-059f-4750-8bfe-7def13ef37e8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3bc6332f-8b45-4f71-b917-215975cd3226",
                            Email = "nina.borisova@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "NINA.BORISOVA@GMAIL.COM",
                            NormalizedUserName = "NINA.BORISOVA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAcC9Laiq+L1M5ZW9MBquNPnTsevAq/YONDV9g6QDKzdybjuDd+idmOZ9rn6WHC48A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bac408c4-f6ff-46d9-90ef-673b58b6a48c",
                            TwoFactorEnabled = false,
                            UserName = "nina.borisova@gmail.com"
                        },
                        new
                        {
                            Id = "1a688e82-f609-47af-a359-d8bcdd62b5e9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "23dc6944-d135-4716-bba0-378c3b5a3986",
                            Email = "ivo.pavlov@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVO.PAVLOV@GMAIL.COM",
                            NormalizedUserName = "IVO.PAVLOV@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEM5Y6TC3GRGyluzrQMqy9O44fso4Qyvt8xyXQOcsA1fIpHRvDmP10TZm9TMcuTMOCg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1ba63c74-363e-4bba-b637-25d0117bfdd9",
                            TwoFactorEnabled = false,
                            UserName = "ivo.pavlov@gmail.com"
                        },
                        new
                        {
                            Id = "01185cf1-525d-478a-ad05-b9629573333a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "18e10bf4-2903-48fb-bf3b-b20b07a9f0ff",
                            Email = "katerina.gancheva@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "KATERINA.GANCHEVA@GMAIL.COM",
                            NormalizedUserName = "KATERINA.GANCHEVA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIVEVLs9jtxodtCOetKpjpg2qf1bX3EvBjOdYpNySwXOxcmDJsPz0upAYnEdLdRjxw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ca40bcc6-c108-4e1c-95a9-aa9d4da1b8ad",
                            TwoFactorEnabled = false,
                            UserName = "katerina.gancheva@gmail.com"
                        },
                        new
                        {
                            Id = "cab3584a-da3f-4858-a65a-3f7bde9e553f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fb95564e-44e8-41ea-aa8a-92f0789afeff",
                            Email = "dimitar.mihailov@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DIMITAR.MIHAILOV@GMAIL.COM",
                            NormalizedUserName = "DIMITAR.MIHAILOV@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDJ+FdgGtRw8CyZ56yCp/2WlizssU07cavLzjDYnlFcwLsdNS+jhVJUCl+nR5d21lA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "03eb8f0c-421a-48d9-b4f5-c1fba125b8c2",
                            TwoFactorEnabled = false,
                            UserName = "dimitar.mihailov@gmail.com"
                        },
                        new
                        {
                            Id = "325092c7-9882-40d9-854b-32326c2bd43b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ca4cea5b-c748-4fe5-bdc1-87774de9d5f4",
                            Email = "stefan.yordanov@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STEFAN.YORDANOV@GMAIL.COM",
                            NormalizedUserName = "STEFAN.YORDANOV@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN5A4DhvMjqNkj7gN07rSozkYdHMAp8JGbO9nPg2bfFSjF/t8I84WAkUnW4ynNiVGg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ad27bd21-c809-44ee-a877-c4aa3ae7d45e",
                            TwoFactorEnabled = false,
                            UserName = "stefan.yordanov@gmail.com"
                        },
                        new
                        {
                            Id = "2e830c43-2ce2-462d-9880-be8aa1e71696",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "147055f0-ec4b-4bd2-af25-a4fa7f903a6d",
                            Email = "diana.ruseva@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DIANA.RUSEVA@GMAIL.COM",
                            NormalizedUserName = "DIANA.RUSEVA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEH90cW3a74b6ozXZB0EBxTqMpTL+V5RhLz0uL2LhKp4nJZeuHjTt/YwYtdhoFZOBuA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8f1bc6d1-4ed6-49fa-9535-7d14aeed8fdd",
                            TwoFactorEnabled = false,
                            UserName = "diana.ruseva@gmail.com"
                        },
                        new
                        {
                            Id = "c64af0f1-3716-4e30-b5f7-b0c5153e2b01",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1889e72a-a9ca-4c86-b024-209595bed942",
                            Email = "petar.georgiev@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PETAR.GEORGIEV@GMAIL.COM",
                            NormalizedUserName = "PETAR.GEORGIEV@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEO095OSTCiM02BQyDnYcB9gUiN7atGaOyP47PODCG2O3Or9diJEZjJPilSAR4QeqpA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5cc31f0b-3657-427a-aee5-17060e15f91a",
                            TwoFactorEnabled = false,
                            UserName = "petar.georgiev@gmail.com"
                        },
                        new
                        {
                            Id = "ab696b9f-f5d2-45a0-8495-96e2d2a01acc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1eca0878-186b-44e0-9c1a-b71fee724994",
                            Email = "tanya.ivanova@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TANYA.IVANOVA@GMAIL.COM",
                            NormalizedUserName = "TANYA.IVANOVA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECjC4YCKH82SbMoQuCGYIsvMg6/0xSYn//fVEDHUSBZ8lAuLsgoPCskJ5QKp6pezUw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ac141018-9f09-4e96-8739-3b710172859c",
                            TwoFactorEnabled = false,
                            UserName = "tanya.ivanova@gmail.com"
                        },
                        new
                        {
                            Id = "8eb86d7d-02f7-477d-8e6f-539d7c155930",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4d7a8725-5706-4496-90a7-bd5a9117460c",
                            Email = "aleksandar.pavlov@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALEKSANDAR.PAVLOV@GMAIL.COM",
                            NormalizedUserName = "ALEKSANDAR.PAVLOV@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPMXLzdhJDOAGd1m6TLEngCozcADv2FMTa687rF5Lxl541lt5e4b7uCTpp9sCrHadA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c6a028c0-4aa3-45f7-8fb8-8cc95eb315b1",
                            TwoFactorEnabled = false,
                            UserName = "aleksandar.pavlov@gmail.com"
                        },
                        new
                        {
                            Id = "3034c6c5-e1f5-4655-9baf-079f41605550",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "975e8422-37da-4f40-9df3-008592754f8c",
                            Email = "julia.dimitrova@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JULIA.DIMITROVA@GMAIL.COM",
                            NormalizedUserName = "JULIA.DIMITROVA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEE+qK7nb6eYgWWHV31hJ8VfWbfSXigRKxKS5H5gyaKRdDdNXO1ldivRSBtCo8T9T0A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d2220536-d1f1-4b47-8a0b-0929d49cbe8b",
                            TwoFactorEnabled = false,
                            UserName = "julia.dimitrova@gmail.com"
                        },
                        new
                        {
                            Id = "e8264a26-ea76-44c4-a013-12759599a081",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e80a736b-dbd9-4efc-99e3-d56367923e37",
                            Email = "kiril.kolarov@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "KIRIL.KOLAROV@GMAIL.COM",
                            NormalizedUserName = "KIRIL.KOLAROV@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPf6nOYCP6Oi67Bj/g0h1FWIvZlsZhCyjK2NrVN1+mg+gPgAPjCmAgsDp/ZzccPFRA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3063e2ff-46cf-40ce-a6d6-3675cbe2ff5b",
                            TwoFactorEnabled = false,
                            UserName = "kiril.kolarov@gmail.com"
                        },
                        new
                        {
                            Id = "e0e396e6-53f2-40e9-8013-664b8a8dbd46",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2b0682da-a4fa-44c9-88ba-9526a03c6a89",
                            Email = "daniela.todorova@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DANIELA.TODOROVA@GMAIL.COM",
                            NormalizedUserName = "DANIELA.TODOROVA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPMa/QAmmtr74+qm8BfTfc8v4o6jDQZc7EBCGooqSFlODwTXcwZb7URJU3dxPWN/Tw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "36a7fa35-250c-4bae-8c21-4a5f97bda41e",
                            TwoFactorEnabled = false,
                            UserName = "daniela.todorova@gmail.com"
                        },
                        new
                        {
                            Id = "b8d81f44-f8a9-43e6-83fe-e62ab38f30cf",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "023ce682-199d-46cf-a705-2f1cba132dbe",
                            Email = "lazar.grigorov@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "LAZAR.GRIGOROV@GMAIL.COM",
                            NormalizedUserName = "LAZAR.GRIGOROV@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFeMMGOKnmpI2y3SgyTvf76zSdBCpIdSy/4GhBZMftzV7mRQLezObBx3q+f34ub7Xg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "83e1289b-5346-4e68-ae68-965825ab8bc5",
                            TwoFactorEnabled = false,
                            UserName = "lazar.grigorov@gmail.com"
                        },
                        new
                        {
                            Id = "0c4b8988-22f2-4ed5-8486-85e757a97e41",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8258b9d3-9fa5-45bc-a902-38561e253f90",
                            Email = "ivanka.nikolova@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVANKA.NIKOLOVA@GMAIL.COM",
                            NormalizedUserName = "IVANKA.NIKOLOVA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJMpSn3Ae3mDLss7BEKs2XAuA8uOn5KYV0GUtkZW6zf0F1f1bgmbYCNBos+kUimkDg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ca7a7574-c3f7-42a0-bdd9-e4dada7355aa",
                            TwoFactorEnabled = false,
                            UserName = "ivanka.nikolova@gmail.com"
                        },
                        new
                        {
                            Id = "3a76fd9d-a1bb-48f2-9626-1122ecf2d797",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ed855d3e-dd3d-4af2-bf3d-afa797b3c988",
                            Email = "gergana.georgieva@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "GERGANA.GEORGIEVA@GMAIL.COM",
                            NormalizedUserName = "GERGANA.GEORGIEVA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELtH677YqCYDs/FhhA5SHkrp4RbLQsLkuPwdpZAWBYp0P2V0EEmNTfiq9bO4VX8LFQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "db36e8a4-c906-4b53-8a99-931042879caa",
                            TwoFactorEnabled = false,
                            UserName = "gergana.georgieva@gmail.com"
                        },
                        new
                        {
                            Id = "51065229-23b9-402f-a54d-00bb813d6b1c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b099ae8a-1b4c-45e5-a20d-36f43a54abff",
                            Email = "stan12@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STAN12@GMAIL.COM",
                            NormalizedUserName = "STAN12@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBMv5Wo/nluycNn90nEilbgWyPOFHcITm1TSQNgU13C89pp0zi/UcWOmSR+tvvT4Ww==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "stan12@gmail.com"
                        },
                        new
                        {
                            Id = "6b6433a7-3564-4cba-ace2-4a44afca4177",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5153322f-c92c-4e7e-baf0-ba11a71c0064",
                            Email = "ivdra23@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVDRA23@GMAIL.COM",
                            NormalizedUserName = "IVDRA23@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGojZpKdlYxqKy5pzLiNvHwTYJHBnH6EoAvRQg9Jy/TqhHsqiY2FOSxb0qlwNYGO9Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "ivdra23@gmail.com"
                        },
                        new
                        {
                            Id = "331d08d0-d407-4d61-af6e-1bb134ae7998",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f066c8db-ff0a-487e-9c31-3c8ba200c0c0",
                            Email = "mariya.petrova@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARIYA.PETROVA@GMAIL.COM",
                            NormalizedUserName = "MARIYA.PETROVA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOi8O8XveFggqxKfJ6Yh4XxPWeFONSzGZEocDF9CwrDgTVIRK1GOtKKk+IRG5ixFhg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "mariya.petrova@gmail.com"
                        },
                        new
                        {
                            Id = "030ddabd-7dcb-46ca-bab6-3feeae3492a8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c146ae7b-5854-409f-93dd-6d9f4312b78f",
                            Email = "nikolai.vasilev@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "NIKOLAI.VASILEV@GMAIL.COM",
                            NormalizedUserName = "NIKOLAI.VASILEV@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBVtuMBulRrNO8Q4mttGcbJoUxvACfRka1qwZ/jYq+yYSiEXlEFNBQqoB7Z2MyF7BQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "nikolai.vasilev@gmail.com"
                        },
                        new
                        {
                            Id = "291cc1a8-8f2c-4f48-a919-ff4d9692a859",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7b2d2bcb-c8c0-4357-a137-92ee18df498d",
                            Email = "radoslav.ivanov@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "RADOSLAV.IVANOV@GMAIL.COM",
                            NormalizedUserName = "RADOSLAV.IVANOV@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBpagpXCTcBjDlnzOSU3qroBef/6xEEydtb8l5UyDay5vsKWzxTBxIFzU5ZSg2ZkqQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "radoslav.ivanov@gmail.com"
                        },
                        new
                        {
                            Id = "32739a60-8250-4178-a19c-96d90444ebd3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d2c04772-f6c2-4188-b699-6af66854cad4",
                            Email = "katerina.dimitrova@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "KATERINA.DIMITROVA@GMAIL.COM",
                            NormalizedUserName = "KATERINA.DIMITROVA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJXkiXy2b88+hrXXnBTOtiXW+nIdMKqxl7WsLgVg9YGYGyRBxoab6ckA0NeGccg5Bg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "katerina.dimitrova@gmail.com"
                        },
                        new
                        {
                            Id = "3647bea5-9ce4-4d8b-bf0f-7a5fbd3ea729",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a093b88d-b511-4d34-9217-1d7ab51883d9",
                            Email = "gosho.georgiev@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "GOSHO.GEORGIEV@GMAIL.COM",
                            NormalizedUserName = "GOSHO.GEORGIEV@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEM5WG82OQyWdxPoLPS0UKCrQurBU0uuQriv+ab+Ug7BNTc8+8LQCuAjWkTT77rv6jA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "gosho.georgiev@gmail.com"
                        },
                        new
                        {
                            Id = "2ad410b1-c108-4b9c-99f1-0f68dbd6ad45",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "03a1eb22-4739-4532-a2c3-e1b633785c6a",
                            Email = "lidia.todorova@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "LIDIA.TODOROVA@GMAIL.COM",
                            NormalizedUserName = "LIDIA.TODOROVA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOPqLjTyai5Ib1ykWldRr++0Ju1ZLrReLphUuBHZ/p0dBZGrTGHjihEwxudsmYzGzA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "lidia.todorova@gmail.com"
                        },
                        new
                        {
                            Id = "04b6c6b1-5f9b-4c7a-9f42-86193c03d327",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "21ce1668-e41e-4755-8e72-335246e14008",
                            Email = "stefan.kovachev@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STEFAN.KOVACHEV@GMAIL.COM",
                            NormalizedUserName = "STEFAN.KOVACHEV@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPK5H7qGL9aGBJJGEbKLE7QKtgJJQERRJJqAJa1kmr6Vy9UzjrtzJ0crqL5QbEgQLA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "stefan.kovachev@gmail.com"
                        },
                        new
                        {
                            Id = "9ab8c775-88c0-4dc3-b11d-178c3ca2129",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e6f349f9-9bac-4eb5-9936-28aeca2c8c57",
                            Email = "valentina.nikolova@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "VALENTINA.NIKOLOVA@GMAIL.COM",
                            NormalizedUserName = "VALENTINA.NIKOLOVA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOOJbrIDvZV12gigC/tnLvRT+kcq8NfDGJXcI6eyWIcpQ193DA2vJTOuQ35OBawZ9w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "valentina.nikolova@gmail.com"
                        },
                        new
                        {
                            Id = "bb8c0d8c-24e0-4e4f-b8a7-5c69e5895b9f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "635bf612-1a20-4c9e-a9a6-cf8cffe7f6ee",
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDibKH0bYBxdMxEl/aZFe4sDyL83LEDytqpQI9WR7b5zU3hqkGBYmSKplt6ss3/JOQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Absence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Absence Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasComment("Course Identifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasComment("Date of Absence");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Shows if absence is Deleted");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasComment("Student Identifier");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("Absences");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Shows if class is Deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("The name of the class");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int")
                        .HasComment("The ID of the teacher for this class");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Classes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "10b",
                            TeacherId = 21
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "9a",
                            TeacherId = 22
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "11c",
                            TeacherId = 23
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            Name = "12a",
                            TeacherId = 24
                        },
                        new
                        {
                            Id = 5,
                            IsDeleted = false,
                            Name = "8b",
                            TeacherId = 25
                        },
                        new
                        {
                            Id = 6,
                            IsDeleted = false,
                            Name = "7a",
                            TeacherId = 26
                        },
                        new
                        {
                            Id = 7,
                            IsDeleted = false,
                            Name = "6c",
                            TeacherId = 27
                        },
                        new
                        {
                            Id = 8,
                            IsDeleted = false,
                            Name = "10a",
                            TeacherId = 28
                        },
                        new
                        {
                            Id = 9,
                            IsDeleted = false,
                            Name = "9b",
                            TeacherId = 29
                        },
                        new
                        {
                            Id = 10,
                            IsDeleted = false,
                            Name = "11a",
                            TeacherId = 30
                        });
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.ClassCourse", b =>
                {
                    b.Property<int>("ClassId")
                        .HasColumnType("int")
                        .HasComment("Class Identifier");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasComment("Course Identifier");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date of enrollment");

                    b.HasKey("ClassId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("ClassCourses");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Course Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Course Description");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasComment("Course End Date");

                    b.Property<int>("EnrollmentCap")
                        .HasColumnType("int")
                        .HasComment("Maximum number of students allowed");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Shows if course is Deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Course Name");

                    b.Property<string>("PublisherId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Publisher Identification");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasComment("Course Start Date");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int")
                        .HasComment("Teacher of the Course");

                    b.HasKey("Id");

                    b.HasIndex("PublisherId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Best biology learning system in the world",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnrollmentCap = 0,
                            IsDeleted = false,
                            Name = "Biology",
                            PublisherId = "bb8c0d8c-24e0-4e4f-b8a7-5c69e5895b9f",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TeacherId = 21
                        },
                        new
                        {
                            Id = 2,
                            Description = "Best history learning system in the world",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnrollmentCap = 0,
                            IsDeleted = false,
                            Name = "History",
                            PublisherId = "bb8c0d8c-24e0-4e4f-b8a7-5c69e5895b9f",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TeacherId = 22
                        },
                        new
                        {
                            Id = 3,
                            Description = "Comprehensive mathematics curriculum for all levels",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnrollmentCap = 0,
                            IsDeleted = false,
                            Name = "Mathematics",
                            PublisherId = "bb8c0d8c-24e0-4e4f-b8a7-5c69e5895b9f",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TeacherId = 23
                        },
                        new
                        {
                            Id = 4,
                            Description = "Advanced physics concepts and practical applications",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnrollmentCap = 0,
                            IsDeleted = false,
                            Name = "Physics",
                            PublisherId = "bb8c0d8c-24e0-4e4f-b8a7-5c69e5895b9f",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TeacherId = 24
                        },
                        new
                        {
                            Id = 5,
                            Description = "Exploring the fundamentals of chemistry",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnrollmentCap = 0,
                            IsDeleted = false,
                            Name = "Chemistry",
                            PublisherId = "bb8c0d8c-24e0-4e4f-b8a7-5c69e5895b9f",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TeacherId = 25
                        },
                        new
                        {
                            Id = 6,
                            Description = "In-depth analysis of classic and modern literature",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnrollmentCap = 0,
                            IsDeleted = false,
                            Name = "English Literature",
                            PublisherId = "bb8c0d8c-24e0-4e4f-b8a7-5c69e5895b9f",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TeacherId = 26
                        },
                        new
                        {
                            Id = 7,
                            Description = "Programming, algorithms, and computing fundamentals",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnrollmentCap = 0,
                            IsDeleted = false,
                            Name = "Computer Science",
                            PublisherId = "bb8c0d8c-24e0-4e4f-b8a7-5c69e5895b9f",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TeacherId = 27
                        },
                        new
                        {
                            Id = 8,
                            Description = "Understanding economic systems, theories, and policies",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnrollmentCap = 0,
                            IsDeleted = false,
                            Name = "Economics",
                            PublisherId = "bb8c0d8c-24e0-4e4f-b8a7-5c69e5895b9f",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TeacherId = 28
                        },
                        new
                        {
                            Id = 9,
                            Description = "Exploring the earth's physical features and human geography",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnrollmentCap = 0,
                            IsDeleted = false,
                            Name = "Geography",
                            PublisherId = "bb8c0d8c-24e0-4e4f-b8a7-5c69e5895b9f",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TeacherId = 29
                        },
                        new
                        {
                            Id = 10,
                            Description = "The study of art movements, artists, and their works",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnrollmentCap = 0,
                            IsDeleted = false,
                            Name = "Art History",
                            PublisherId = "bb8c0d8c-24e0-4e4f-b8a7-5c69e5895b9f",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TeacherId = 30
                        });
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique Identifier for the Grade entry");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasComment("Identifier of the Course");

                    b.Property<DateTime>("GradeAssignedDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date when the grade was assigned");

                    b.Property<double>("GradeScore")
                        .HasColumnType("float")
                        .HasComment("Grade received by the student for a specific course assessment");

                    b.Property<string>("GradeType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Description or type of the grade (e.g., Midterm, Final, Homework)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Shows if grade is Deleted");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasComment("Identifier of the Student");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("News Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("News Content");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasComment("News Date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Shows if news is Deleted");

                    b.Property<string>("PublisherId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Publisher Identifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("News Title");

                    b.HasKey("Id");

                    b.HasIndex("PublisherId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Remark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Remark Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasComment("Course Identifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasComment("Date of the remark");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Shows if remark is Deleted");

                    b.Property<string>("RemarkText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Remark Text");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasComment("Student Identifier");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int")
                        .HasComment("Teacher Identifier");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Remarks");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("School Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("School Name");

                    b.HasKey("Id");

                    b.ToTable("Schools");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "School of Mathematics"
                        },
                        new
                        {
                            Id = 2,
                            Name = "School of Physics"
                        },
                        new
                        {
                            Id = 3,
                            Name = "School of Chemistry"
                        },
                        new
                        {
                            Id = 4,
                            Name = "School of Biology"
                        },
                        new
                        {
                            Id = 5,
                            Name = "School of Computer Science"
                        },
                        new
                        {
                            Id = 6,
                            Name = "School of Economics"
                        },
                        new
                        {
                            Id = 7,
                            Name = "School of Law"
                        },
                        new
                        {
                            Id = 8,
                            Name = "School of Medicine"
                        },
                        new
                        {
                            Id = 9,
                            Name = "School of Philosophy"
                        },
                        new
                        {
                            Id = 10,
                            Name = "School of History"
                        });
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Student Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassId")
                        .HasColumnType("int")
                        .HasComment("Class Identifier");

                    b.Property<string>("ContactDetails")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Student Contact Details");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasComment("Date of birth of Student");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Student Email Address");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Student First Name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Shows if student is Deleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Student Last Name");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Student Middle Name");

                    b.Property<double>("Performance")
                        .HasColumnType("float")
                        .HasComment("Student Performance");

                    b.Property<string>("PersonalId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("Student Personal Identification Number");

                    b.Property<string>("ProfilePicturePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Path to the profile picture of the student");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasComment("School Identifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User Identifier");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("UserId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClassId = 3,
                            ContactDetails = "GSM:882163890",
                            DateOfBirth = new DateTime(2006, 12, 7, 0, 11, 15, 874, DateTimeKind.Local).AddTicks(5598),
                            Email = "ivan414@gmail.com",
                            FirstName = "Ivan",
                            IsDeleted = false,
                            LastName = "Petrov",
                            MiddleName = "Grigorov",
                            Performance = 0.0,
                            PersonalId = "9564039305",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            UserId = "aa7d01c6-9499-4ed4-a38e-3d0afa2b707c"
                        },
                        new
                        {
                            Id = 2,
                            ClassId = 5,
                            ContactDetails = "GSM:889556992",
                            DateOfBirth = new DateTime(2007, 12, 7, 0, 11, 15, 874, DateTimeKind.Local).AddTicks(5663),
                            Email = "maria270@gmail.com",
                            FirstName = "Maria",
                            IsDeleted = false,
                            LastName = "Grigorov",
                            MiddleName = "Georgiev",
                            Performance = 0.0,
                            PersonalId = "6934567210",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            UserId = "f2875100-0cf1-4b1d-ba91-1dfa38690f84"
                        },
                        new
                        {
                            Id = 3,
                            ClassId = 5,
                            ContactDetails = "GSM:883854732",
                            DateOfBirth = new DateTime(2007, 12, 7, 0, 11, 15, 874, DateTimeKind.Local).AddTicks(5668),
                            Email = "elena309@gmail.com",
                            FirstName = "Elena",
                            IsDeleted = false,
                            LastName = "Todorov",
                            MiddleName = "Grigorov",
                            Performance = 0.0,
                            PersonalId = "3699302616",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            UserId = "b65e6163-1454-4164-9869-2ff822f9da98"
                        },
                        new
                        {
                            Id = 4,
                            ClassId = 4,
                            ContactDetails = "GSM:886992374",
                            DateOfBirth = new DateTime(2006, 12, 7, 0, 11, 15, 874, DateTimeKind.Local).AddTicks(5673),
                            Email = "viktor725@gmail.com",
                            FirstName = "Viktor",
                            IsDeleted = false,
                            LastName = "Todorov",
                            MiddleName = "Todorov",
                            Performance = 0.0,
                            PersonalId = "2940063663",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            UserId = "c5d7d80f-08d5-41ec-892c-30833098c047"
                        },
                        new
                        {
                            Id = 5,
                            ClassId = 2,
                            ContactDetails = "GSM:884738222",
                            DateOfBirth = new DateTime(2008, 12, 7, 0, 11, 15, 874, DateTimeKind.Local).AddTicks(5677),
                            Email = "pesho278@gmail.com",
                            FirstName = "Pesho",
                            IsDeleted = false,
                            LastName = "Nikolov",
                            MiddleName = "Nikolov",
                            Performance = 0.0,
                            PersonalId = "4204190914",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            UserId = "217e3e65-026d-4a8e-97af-a4fb30dfab30"
                        },
                        new
                        {
                            Id = 6,
                            ClassId = 1,
                            ContactDetails = "GSM:888183734",
                            DateOfBirth = new DateTime(2005, 12, 7, 0, 11, 15, 874, DateTimeKind.Local).AddTicks(5681),
                            Email = "nina.borisova@gmail.com",
                            FirstName = "Nina",
                            IsDeleted = false,
                            LastName = "Todorova",
                            MiddleName = "Borisova",
                            Performance = 0.0,
                            PersonalId = "5392831842",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            UserId = "8f7bca8f-059f-4750-8bfe-7def13ef37e8"
                        },
                        new
                        {
                            Id = 7,
                            ClassId = 1,
                            ContactDetails = "GSM:883764543",
                            DateOfBirth = new DateTime(2004, 12, 7, 0, 11, 15, 874, DateTimeKind.Local).AddTicks(5697),
                            Email = "ivo.pavlov@gmail.com",
                            FirstName = "Ivo",
                            IsDeleted = false,
                            LastName = "Pavlov",
                            MiddleName = "Petrov",
                            Performance = 0.0,
                            PersonalId = "6758374932",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            UserId = "1a688e82-f609-47af-a359-d8bcdd62b5e9"
                        },
                        new
                        {
                            Id = 8,
                            ClassId = 3,
                            ContactDetails = "GSM:882847361",
                            DateOfBirth = new DateTime(2003, 12, 7, 0, 11, 15, 874, DateTimeKind.Local).AddTicks(5701),
                            Email = "katerina.gancheva@gmail.com",
                            FirstName = "Katerina",
                            IsDeleted = false,
                            LastName = "Gancheva",
                            MiddleName = "Alexandrova",
                            Performance = 0.0,
                            PersonalId = "8293840598",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            UserId = "01185cf1-525d-478a-ad05-b9629573333a"
                        },
                        new
                        {
                            Id = 9,
                            ClassId = 4,
                            ContactDetails = "GSM:887654321",
                            DateOfBirth = new DateTime(2002, 12, 7, 0, 11, 15, 874, DateTimeKind.Local).AddTicks(5708),
                            Email = "dimitar.mihailov@gmail.com",
                            FirstName = "Dimitar",
                            IsDeleted = false,
                            LastName = "Mihailov",
                            MiddleName = "Georgiev",
                            Performance = 0.0,
                            PersonalId = "9382843621",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            UserId = "cab3584a-da3f-4858-a65a-3f7bde9e553f"
                        },
                        new
                        {
                            Id = 10,
                            ClassId = 5,
                            ContactDetails = "GSM:885676543",
                            DateOfBirth = new DateTime(2001, 12, 7, 0, 11, 15, 874, DateTimeKind.Local).AddTicks(5712),
                            Email = "stefan.yordanov@gmail.com",
                            FirstName = "Stefan",
                            IsDeleted = false,
                            LastName = "Yordanov",
                            MiddleName = "Ivanov",
                            Performance = 0.0,
                            PersonalId = "4902385726",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            UserId = "325092c7-9882-40d9-854b-32326c2bd43b"
                        },
                        new
                        {
                            Id = 11,
                            ClassId = 2,
                            ContactDetails = "GSM:882364788",
                            DateOfBirth = new DateTime(2004, 12, 7, 0, 11, 15, 874, DateTimeKind.Local).AddTicks(5719),
                            Email = "diana.ruseva@gmail.com",
                            FirstName = "Diana",
                            IsDeleted = false,
                            LastName = "Ruseva",
                            MiddleName = "Stoyanova",
                            Performance = 0.0,
                            PersonalId = "2945641207",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            UserId = "2e830c43-2ce2-462d-9880-be8aa1e71696"
                        },
                        new
                        {
                            Id = 12,
                            ClassId = 3,
                            ContactDetails = "GSM:889276400",
                            DateOfBirth = new DateTime(2003, 12, 7, 0, 11, 15, 874, DateTimeKind.Local).AddTicks(5724),
                            Email = "petar.georgiev@gmail.com",
                            FirstName = "Petar",
                            IsDeleted = false,
                            LastName = "Georgiev",
                            MiddleName = "Zahariev",
                            Performance = 0.0,
                            PersonalId = "1298345761",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            UserId = "c64af0f1-3716-4e30-b5f7-b0c5153e2b01"
                        },
                        new
                        {
                            Id = 13,
                            ClassId = 4,
                            ContactDetails = "GSM:883712508",
                            DateOfBirth = new DateTime(2005, 12, 7, 0, 11, 15, 874, DateTimeKind.Local).AddTicks(5728),
                            Email = "tanya.ivanova@gmail.com",
                            FirstName = "Tanya",
                            IsDeleted = false,
                            LastName = "Ivanova",
                            MiddleName = "Vasileva",
                            Performance = 0.0,
                            PersonalId = "8471629304",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            UserId = "ab696b9f-f5d2-45a0-8495-96e2d2a01acc"
                        },
                        new
                        {
                            Id = 14,
                            ClassId = 2,
                            ContactDetails = "GSM:887327015",
                            DateOfBirth = new DateTime(2006, 12, 7, 0, 11, 15, 874, DateTimeKind.Local).AddTicks(5732),
                            Email = "aleksandar.pavlov@gmail.com",
                            FirstName = "Aleksandar",
                            IsDeleted = false,
                            LastName = "Pavlov",
                            MiddleName = "Dimitrov",
                            Performance = 0.0,
                            PersonalId = "6503849201",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            UserId = "8eb86d7d-02f7-477d-8e6f-539d7c155930"
                        },
                        new
                        {
                            Id = 15,
                            ClassId = 5,
                            ContactDetails = "GSM:888014697",
                            DateOfBirth = new DateTime(2004, 12, 7, 0, 11, 15, 874, DateTimeKind.Local).AddTicks(5736),
                            Email = "julia.dimitrova@gmail.com",
                            FirstName = "Julia",
                            IsDeleted = false,
                            LastName = "Dimitrova",
                            MiddleName = "Borisova",
                            Performance = 0.0,
                            PersonalId = "8473926140",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            UserId = "3034c6c5-e1f5-4655-9baf-079f41605550"
                        },
                        new
                        {
                            Id = 16,
                            ClassId = 1,
                            ContactDetails = "GSM:884728672",
                            DateOfBirth = new DateTime(2006, 12, 7, 0, 11, 15, 874, DateTimeKind.Local).AddTicks(5798),
                            Email = "kiril.kolarov@gmail.com",
                            FirstName = "Kiril",
                            IsDeleted = false,
                            LastName = "Kolarov",
                            MiddleName = "Vasilev",
                            Performance = 0.0,
                            PersonalId = "5392837362",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            UserId = "e8264a26-ea76-44c4-a013-12759599a081"
                        },
                        new
                        {
                            Id = 17,
                            ClassId = 3,
                            ContactDetails = "GSM:889253738",
                            DateOfBirth = new DateTime(2002, 12, 7, 0, 11, 15, 874, DateTimeKind.Local).AddTicks(5803),
                            Email = "daniela.todorova@gmail.com",
                            FirstName = "Daniela",
                            IsDeleted = false,
                            LastName = "Todorova",
                            MiddleName = "Dimitrova",
                            Performance = 0.0,
                            PersonalId = "8282020193",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            UserId = "e0e396e6-53f2-40e9-8013-664b8a8dbd46"
                        },
                        new
                        {
                            Id = 18,
                            ClassId = 4,
                            ContactDetails = "GSM:888107316",
                            DateOfBirth = new DateTime(2003, 12, 7, 0, 11, 15, 874, DateTimeKind.Local).AddTicks(5807),
                            Email = "lazar.grigorov@gmail.com",
                            FirstName = "Lazar",
                            IsDeleted = false,
                            LastName = "Grigorov",
                            MiddleName = "Nikolov",
                            Performance = 0.0,
                            PersonalId = "9273628105",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            UserId = "b8d81f44-f8a9-43e6-83fe-e62ab38f30cf"
                        },
                        new
                        {
                            Id = 19,
                            ClassId = 2,
                            ContactDetails = "GSM:887726051",
                            DateOfBirth = new DateTime(2008, 12, 7, 0, 11, 15, 874, DateTimeKind.Local).AddTicks(5811),
                            Email = "ivanka.nikolova@gmail.com",
                            FirstName = "Ivanka",
                            IsDeleted = false,
                            LastName = "Nikolova",
                            MiddleName = "Georgieva",
                            Performance = 0.0,
                            PersonalId = "3846204951",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            UserId = "0c4b8988-22f2-4ed5-8486-85e757a97e41"
                        },
                        new
                        {
                            Id = 20,
                            ClassId = 5,
                            ContactDetails = "GSM:883467150",
                            DateOfBirth = new DateTime(2005, 12, 7, 0, 11, 15, 874, DateTimeKind.Local).AddTicks(5816),
                            Email = "gergana.georgieva@gmail.com",
                            FirstName = "Gergana",
                            IsDeleted = false,
                            LastName = "Georgieva",
                            MiddleName = "Todorova",
                            Performance = 0.0,
                            PersonalId = "1294956172",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            UserId = "3a76fd9d-a1bb-48f2-9626-1122ecf2d797"
                        });
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Teacher Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactDetails")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Teacher Contact Details");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Student Email Address");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Teacher First Name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Shows if teacher is Deleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Teacher Last Name");

                    b.Property<string>("ProfilePicturePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Path to the profile picture of the student");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int")
                        .HasComment("School Identifier");

                    b.Property<string>("Titles")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Teacher Titles");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User Identifier");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.HasIndex("UserId");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = 21,
                            ContactDetails = "for more info visit ...",
                            Email = "stan12@gmail.com",
                            FirstName = "Stanimir",
                            IsDeleted = false,
                            LastName = "Grigorov",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            Titles = "prof. dr. ",
                            UserId = "51065229-23b9-402f-a54d-00bb813d6b1c"
                        },
                        new
                        {
                            Id = 22,
                            ContactDetails = "gsm:12345678655",
                            Email = "ivdra23@gmail.com",
                            FirstName = "Ivan",
                            IsDeleted = false,
                            LastName = "Draganov",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            Titles = "doc. ",
                            UserId = "6b6433a7-3564-4cba-ace2-4a44afca4177"
                        },
                        new
                        {
                            Id = 23,
                            ContactDetails = "gsm:0987654321",
                            Email = "mariya.petrova@gmail.com",
                            FirstName = "Mariya",
                            IsDeleted = false,
                            LastName = "Petrova",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            Titles = "assoc. prof. ",
                            UserId = "331d08d0-d407-4d61-af6e-1bb134ae7998"
                        },
                        new
                        {
                            Id = 24,
                            ContactDetails = "email: nikolai@university.com",
                            Email = "nikolai.vasilev@gmail.com",
                            FirstName = "Nikolai",
                            IsDeleted = false,
                            LastName = "Vasilev",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            Titles = "prof. dr. ",
                            UserId = "030ddabd-7dcb-46ca-bab6-3feeae3492a8"
                        },
                        new
                        {
                            Id = 25,
                            ContactDetails = "for inquiries, email me",
                            Email = "radoslav.ivanov@gmail.com",
                            FirstName = "Radoslav",
                            IsDeleted = false,
                            LastName = "Ivanov",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            Titles = "lect. ",
                            UserId = "291cc1a8-8f2c-4f48-a919-ff4d9692a859"
                        },
                        new
                        {
                            Id = 26,
                            ContactDetails = "gsm:0551237894",
                            Email = "katerina.dimitrova@gmail.com",
                            FirstName = "Katerina",
                            IsDeleted = false,
                            LastName = "Dimitrova",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            Titles = "assoc. prof. ",
                            UserId = "32739a60-8250-4178-a19c-96d90444ebd3"
                        },
                        new
                        {
                            Id = 27,
                            ContactDetails = "gsm:0876543210",
                            Email = "petar.georgiev@gmail.com",
                            FirstName = "Petar",
                            IsDeleted = false,
                            LastName = "Georgiev",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            Titles = "lect. ",
                            UserId = "3647bea5-9ce4-4d8b-bf0f-7a5fbd3ea729"
                        },
                        new
                        {
                            Id = 28,
                            ContactDetails = "email: lidia@faculty.com",
                            Email = "lidia.todorova@gmail.com",
                            FirstName = "Lidia",
                            IsDeleted = false,
                            LastName = "Todorova",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            Titles = "prof. ",
                            UserId = "2ad410b1-c108-4b9c-99f1-0f68dbd6ad45"
                        },
                        new
                        {
                            Id = 29,
                            ContactDetails = "gsm:022112233",
                            Email = "stefan.kovachev@gmail.com",
                            FirstName = "Stefan",
                            IsDeleted = false,
                            LastName = "Kovachev",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            Titles = "doc. ",
                            UserId = "04b6c6b1-5f9b-4c7a-9f42-86193c03d327"
                        },
                        new
                        {
                            Id = 30,
                            ContactDetails = "email: valentina.nikolova@edu.com",
                            Email = "valentina.nikolova@gmail.com",
                            FirstName = "Valentina",
                            IsDeleted = false,
                            LastName = "Nikolova",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            SchoolId = 1,
                            Titles = "prof. dr. ",
                            UserId = "9ab8c775-88c0-4dc3-b11d-178c3ca2129"
                        });
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("First name of the user.");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Last name of the user.");

                    b.Property<string>("PersonalId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("Personal ID is a unique identifier for each person.");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Absence", b =>
                {
                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.Student", "Student")
                        .WithMany("Аbsences")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Class", b =>
                {
                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.Teacher", "Teacher")
                        .WithMany("Classes")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.ClassCourse", b =>
                {
                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.Class", "Class")
                        .WithMany("ClassCourses")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.Course", "Course")
                        .WithMany("CourseClasses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Course", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.Teacher", "Teacher")
                        .WithMany("Courses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Publisher");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Grade", b =>
                {
                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.Course", "Course")
                        .WithMany("Grades")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.Student", "Student")
                        .WithMany("Grades")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.News", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Remark", b =>
                {
                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.Student", "Student")
                        .WithMany("Remarks")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Student", b =>
                {
                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.Class", "Class")
                        .WithMany("Students")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.School", "School")
                        .WithMany("Students")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("School");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Teacher", b =>
                {
                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.School", "School")
                        .WithMany("Teachers")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Class", b =>
                {
                    b.Navigation("ClassCourses");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Course", b =>
                {
                    b.Navigation("CourseClasses");

                    b.Navigation("Grades");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.School", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Student", b =>
                {
                    b.Navigation("Grades");

                    b.Navigation("Remarks");

                    b.Navigation("Аbsences");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Teacher", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
