// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudentManagementSystem.Infrastructure;

#nullable disable

namespace StudentManagementSystem.Infrastructure.Migrations
{
    [DbContext(typeof(StudentManagementDbContext))]
    [Migration("20241124215324_ChangedDeleteBehaviourToCourseAndAddedNullableTeacherToCourse")]
    partial class ChangedDeleteBehaviourToCourseAndAddedNullableTeacherToCourse
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b4a2453b-ab71-45fa-bb8f-fdfab9589458",
                            Email = "ivan414@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVAN414@GMAIL.COM",
                            NormalizedUserName = "IVAN414@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGDAi4FPsN1KUTkX9jmM5i1g4AuGWuEpsyGTPdVTTeHvQCvKvErdtUEG9pHIQucLjA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "89eb0dc6-936f-485c-9a32-8f85cced295a",
                            TwoFactorEnabled = false,
                            UserName = "ivan414@gmail.com"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "702c53b1-453c-4ea0-a694-56502402f853",
                            Email = "maria270@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARIA270@GMAIL.COM",
                            NormalizedUserName = "MARIA270@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHAYKAKTy/gSrGbUczb+wW3FVfaH0qxhACg9SI+iiWfcHLN+1LlZCcMkDGoAtC0qJQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b53af52f-b7fb-4340-85cc-4668c6e05f0f",
                            TwoFactorEnabled = false,
                            UserName = "maria270@gmail.com"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2237b40c-6a00-46a9-ba92-852c71f41c7f",
                            Email = "elena309@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ELENA309@GMAIL.COM",
                            NormalizedUserName = "ELENA309@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELLxzJ8ifX+4KY2zJcoUWpRE9kHQzOBZg6OvBY4B45xmZ2B+KHINt3A8WcGmmMN3oQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8ba4d9e5-7236-43d1-9684-5f75bde1ddae",
                            TwoFactorEnabled = false,
                            UserName = "elena309@gmail.com"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "53c01f25-59e4-4ffc-8a44-c832858853be",
                            Email = "viktor725@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "VIKTOR725@GMAIL.COM",
                            NormalizedUserName = "VIKTOR725@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEszylfAbKJ9isCc3kXA1ZgYqz8CoKpnJvgwkpAcGoHgLvk9Rh/pEMA78rQT9PIw+w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9781e055-2dc2-4858-bff3-72dd3188b8c4",
                            TwoFactorEnabled = false,
                            UserName = "viktor725@gmail.com"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4d0fe245-1deb-4980-890d-d733ef7a9d50",
                            Email = "pesho278@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PESHO278@GMAIL.COM",
                            NormalizedUserName = "PESHO278@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEG9JGei7qGAyrVnJU8uoODF/PEEJ2lFZDFqTBaR8mJ4OvYqET+Ab84Iue8fpZOuHqg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4702f12a-c8dd-4b03-a25d-81d45d3eea9b",
                            TwoFactorEnabled = false,
                            UserName = "pesho278@gmail.com"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1cfb252f-7aac-402d-bd61-6666097d11dd",
                            Email = "nina.borisova@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "NINA.BORISOVA@GMAIL.COM",
                            NormalizedUserName = "NINA.BORISOVA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENE3EL9V0giU8KVaeGtr8+QNfvPVfGCWz2BCYnAF4EzYJUGEffrVgKfBQRYOFf5l/Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "38428672-b8c1-426d-afd4-dcfdf7572c47",
                            TwoFactorEnabled = false,
                            UserName = "nina.borisova@gmail.com"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8d13bf12-3031-41eb-981e-7533246d933a",
                            Email = "ivo.pavlov@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVO.PAVLOV@GMAIL.COM",
                            NormalizedUserName = "IVO.PAVLOV@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEE+e2Q/xUM98C4a3Rdy4uA4VH8tEoAWVQeIXJrCKVuFRZ+dGY2OuPQboE837cimuA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "85c9615d-7149-4301-821f-a98329eee434",
                            TwoFactorEnabled = false,
                            UserName = "ivo.pavlov@gmail.com"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3ab69ddd-828b-4262-87cb-59f1c526acab",
                            Email = "katerina.gancheva@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "KATERINA.GANCHEVA@GMAIL.COM",
                            NormalizedUserName = "KATERINA.GANCHEVA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPIc2IJ2qJ2ipzKrhK9/meubFkTwLFkRU+e+KYbgywm1D0Iwv9snQf7Lh6OY+E/osQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ec14d7d8-7a21-4bda-838a-4246990a6325",
                            TwoFactorEnabled = false,
                            UserName = "katerina.gancheva@gmail.com"
                        },
                        new
                        {
                            Id = "9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "352fda53-3600-4ab2-b159-4b257b58fc7d",
                            Email = "dimitar.mihailov@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DIMITAR.MIHAILOV@GMAIL.COM",
                            NormalizedUserName = "DIMITAR.MIHAILOV@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJBawUH9d7/7GzLj4rasHRMnj9iP2wciRUOdcaAgJtFlCU/8zXZdrHGJAW53aG7Tjg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0b4a3121-3ec7-434a-8fe1-7d80f348bc6c",
                            TwoFactorEnabled = false,
                            UserName = "dimitar.mihailov@gmail.com"
                        },
                        new
                        {
                            Id = "10",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "943931ea-d2e6-490b-9c79-9149691edb46",
                            Email = "stefan.yordanov@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STEFAN.YORDANOV@GMAIL.COM",
                            NormalizedUserName = "STEFAN.YORDANOV@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEM2sR5/dtd0Hecf4y7V8HcLDhMdlvqBKg6i/kIZlZPFXhbzphaE+/K3LJEPT+PzVzQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "13bdb72c-c15f-4895-bc70-fb53008983e3",
                            TwoFactorEnabled = false,
                            UserName = "stefan.yordanov@gmail.com"
                        },
                        new
                        {
                            Id = "11",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f8dba2d1-51d3-40cf-a071-4e73cf0265c6",
                            Email = "diana.ruseva@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DIANA.RUSEVA@GMAIL.COM",
                            NormalizedUserName = "DIANA.RUSEVA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEG/mkhHe90g8B2FUp9XAcpbXxXF7CoTGjY4Yn57os5FOBDoI8iGPEXfNdNlY1oNxrQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9a9eb482-111b-493f-b436-a377f95cc82a",
                            TwoFactorEnabled = false,
                            UserName = "diana.ruseva@gmail.com"
                        },
                        new
                        {
                            Id = "12",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "176c04f9-4ac2-4118-9fd9-589a9c089fb8",
                            Email = "petar.georgiev@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PETAR.GEORGIEV@GMAIL.COM",
                            NormalizedUserName = "PETAR.GEORGIEV@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHGaqkn1DZABicvdf+1ISb5PrhXrnIWkdnWsWRlNGK7tUQTFLKrDU/FdJH7BUeZ8jQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "01e8a2ab-e95b-4150-bbeb-266cd4f01f65",
                            TwoFactorEnabled = false,
                            UserName = "petar.georgiev@gmail.com"
                        },
                        new
                        {
                            Id = "13",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "79066092-c0eb-45fd-a840-0132da037622",
                            Email = "tanya.ivanova@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TANYA.IVANOVA@GMAIL.COM",
                            NormalizedUserName = "TANYA.IVANOVA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELQtGXP2fNzXDpuUdxiINKBcvgQGcO5bXT9JjI19nkeSAr+bKvk/HqaeDGzf7RihXQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "99426dfa-9fef-46fb-91cd-d641383b7069",
                            TwoFactorEnabled = false,
                            UserName = "tanya.ivanova@gmail.com"
                        },
                        new
                        {
                            Id = "14",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f89c627a-86ff-43bd-8025-5395672a3549",
                            Email = "aleksandar.pavlov@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALEKSANDAR.PAVLOV@GMAIL.COM",
                            NormalizedUserName = "ALEKSANDAR.PAVLOV@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAlPfX0sfLnnsGiri4VyBIGrhOO+hQS7OfARwoiD3lfd4RPa6M3ZxK10rUpPnaCk4w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ff0d6b26-15ee-4592-a4ba-a13881b30925",
                            TwoFactorEnabled = false,
                            UserName = "aleksandar.pavlov@gmail.com"
                        },
                        new
                        {
                            Id = "15",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3cda5d90-ded4-42f9-89e7-27928c875ebe",
                            Email = "julia.dimitrova@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JULIA.DIMITROVA@GMAIL.COM",
                            NormalizedUserName = "JULIA.DIMITROVA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDNIFGvPBki0Sg2Yg3sll3Imdz5gTl3n6PW5XeZINlaSnZdNM97JpFLRCFW3gJ5ypQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "708a3f43-6ae4-47f1-abd0-94ac71495e7c",
                            TwoFactorEnabled = false,
                            UserName = "julia.dimitrova@gmail.com"
                        },
                        new
                        {
                            Id = "16",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "97dccf7a-a480-4bcd-a49f-a4d065610c51",
                            Email = "kiril.kolarov@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "KIRIL.KOLAROV@GMAIL.COM",
                            NormalizedUserName = "KIRIL.KOLAROV@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEF+1v6NI5y5aCXZIbTMAOzUbgt2dUXQ62TRf35eW7bCRHankiMrIXg9fQEkH9GRLjg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "304ebaf3-7b31-4dbd-9318-3f1c5b093cb6",
                            TwoFactorEnabled = false,
                            UserName = "kiril.kolarov@gmail.com"
                        },
                        new
                        {
                            Id = "17",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "48aed287-f56c-4c82-8937-69698c9cb406",
                            Email = "daniela.todorova@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DANIELA.TODOROVA@GMAIL.COM",
                            NormalizedUserName = "DANIELA.TODOROVA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECob9Gd3kstBpCukKC3dyzlR7YTIwumRFVDxumqfTYBNEe8h+pFwRZ34N/04eHSAyA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d85ffb5e-ed4a-45fa-aa71-6fed3fe26942",
                            TwoFactorEnabled = false,
                            UserName = "daniela.todorova@gmail.com"
                        },
                        new
                        {
                            Id = "18",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d44aa859-2884-409c-b498-82ce1881b188",
                            Email = "lazar.grigorov@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "LAZAR.GRIGOROV@GMAIL.COM",
                            NormalizedUserName = "LAZAR.GRIGOROV@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAED9vU/l0zvB3llOJhprRhuLdrEwd7XKgokJ7z+LlpC/HQBGZTyYp80ID7h779fzWyw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f37e515c-2f6a-41ec-b075-3cc1bee1f45b",
                            TwoFactorEnabled = false,
                            UserName = "lazar.grigorov@gmail.com"
                        },
                        new
                        {
                            Id = "19",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "afba39a3-c9c4-4ba4-adb1-d0fedaad037f",
                            Email = "ivanka.nikolova@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVANKA.NIKOLOVA@GMAIL.COM",
                            NormalizedUserName = "IVANKA.NIKOLOVA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEG7m2oMDUf6XDgZzztQbXwSH8rzOerBWeI5MjOiXzCgSicDrV+P6SzggPlsLRqvOew==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a1ae8cc2-4e6f-4d57-acb2-793107a8f4da",
                            TwoFactorEnabled = false,
                            UserName = "ivanka.nikolova@gmail.com"
                        },
                        new
                        {
                            Id = "20",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5bd628a6-80b1-4fed-aa0b-b18b5a4cdd25",
                            Email = "gergana.georgieva@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "GERGANA.GEORGIEVA@GMAIL.COM",
                            NormalizedUserName = "GERGANA.GEORGIEVA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECtq/hszp7EnDqyTzR3HHWwZ5VytyKFu0nWYAlXU8K0wHcXpUG4S1P9GH5vBHdqZDQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6e988b1b-7d82-46c3-9406-a048a05aa197",
                            TwoFactorEnabled = false,
                            UserName = "gergana.georgieva@gmail.com"
                        },
                        new
                        {
                            Id = "21",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9f345dcf-74e8-4800-96cd-9479100c5081",
                            Email = "stan12@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STAN12@GMAIL.COM",
                            NormalizedUserName = "STAN12@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDqSqSUfgFXirxYoxidNLThMrIksihCMEDLi4VeTbR++SQ5CnmvSqb3fbBuN1psgpg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "stan12@gmail.com"
                        },
                        new
                        {
                            Id = "22",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bcf92725-9085-437b-9f60-f740fa03a009",
                            Email = "ivdra23@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVDRA23@GMAIL.COM",
                            NormalizedUserName = "IVDRA23@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEG+hTwt7AtGjUMercZDf+EmN4OjfcUH96clzpb+uwg2OwU43Py32Den/lTNp+3BM+Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "ivdra23@gmail.com"
                        },
                        new
                        {
                            Id = "23",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f709b85e-20b7-4762-806b-1947dea42b16",
                            Email = "mariya.petrova@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARIYA.PETROVA@GMAIL.COM",
                            NormalizedUserName = "MARIYA.PETROVA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGY5SIdPS1IchWVkxW9UE416ThlkZWVtgbL6UG3vfvRNITS/g+QGds836RCEKXzkzA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "mariya.petrova@gmail.com"
                        },
                        new
                        {
                            Id = "24",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8fea6f52-143a-4297-aaf0-0b337af4f77c",
                            Email = "nikolai.vasilev@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "NIKOLAI.VASILEV@GMAIL.COM",
                            NormalizedUserName = "NIKOLAI.VASILEV@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELaJVOfdKaDzql6d9u5vjpqGR/Ks8xbGtW5If5YROHb7YaaEyrWyJBienUTGnRe8Vw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "nikolai.vasilev@gmail.com"
                        },
                        new
                        {
                            Id = "25",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7ec1ee99-3d77-4142-88f1-2ff1ae70d81a",
                            Email = "radoslav.ivanov@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "RADOSLAV.IVANOV@GMAIL.COM",
                            NormalizedUserName = "RADOSLAV.IVANOV@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHnXkfXAceGjxjxKS5rER+bu9lo/gygb8U+QVbPud76L1bEvX/LYsrVv4lm9zfp1XQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "radoslav.ivanov@gmail.com"
                        },
                        new
                        {
                            Id = "26",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "91ec2f8a-4e7e-4d09-8528-de1df9a685b2",
                            Email = "katerina.dimitrova@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "KATERINA.DIMITROVA@GMAIL.COM",
                            NormalizedUserName = "KATERINA.DIMITROVA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMkhpnhKAzerWwsqrpolILDntsQkgEputSmDasBRYzjTN3OsHJxTEjg7ui9lZccBSQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "katerina.dimitrova@gmail.com"
                        },
                        new
                        {
                            Id = "27",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1ec9f988-ebed-4b6e-866a-69f62330656e",
                            Email = "gosho.georgiev@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "GOSHO.GEORGIEV@GMAIL.COM",
                            NormalizedUserName = "GOSHO.GEORGIEV@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEK/vqwXmsKhbaaXKhFfR+XhYacm70zspC0OMQYrDczRJJ7wbzfP/PLmEreS3dWUAzA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "gosho.georgiev@gmail.com"
                        },
                        new
                        {
                            Id = "28",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3b034eaf-1dec-414b-b5f4-af9dc7a48f21",
                            Email = "lidia.todorova@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "LIDIA.TODOROVA@GMAIL.COM",
                            NormalizedUserName = "LIDIA.TODOROVA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEA/HnqzT2ATNez1Wpk8ThN4WDVlkntQ3tXn81dqV0efOL9wICmlhY+K+zhJF2/cqlA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "lidia.todorova@gmail.com"
                        },
                        new
                        {
                            Id = "29",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1615dbb8-abac-4fa2-ab63-0e60fff4c953",
                            Email = "stefan.kovachev@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STEFAN.KOVACHEV@GMAIL.COM",
                            NormalizedUserName = "STEFAN.KOVACHEV@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMbqWhUB7/iFan8au1nFXi3WUgjEvFiGlBlVBoRxGxS3ViPlxYaxdQikGqhn8oOOOg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "stefan.kovachev@gmail.com"
                        },
                        new
                        {
                            Id = "30",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3cae331d-35a0-4b86-9487-099a7a8f45d2",
                            Email = "valentina.nikolova@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "VALENTINA.NIKOLOVA@GMAIL.COM",
                            NormalizedUserName = "VALENTINA.NIKOLOVA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHVnGbFZO7zSpt2uzDYWagPRWcsewhUXUEisJgMq9aZsXjK7FTKCrlHV+2MB4hDN4Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "valentina.nikolova@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Absence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Absence Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasComment("Course Identifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasComment("Date of Absence");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasComment("Student Identifier");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("Absences");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Shows if class is Deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("The name of the class");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int")
                        .HasComment("The ID of the teacher for this class");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Classes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "10b",
                            TeacherId = 21
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "9a",
                            TeacherId = 22
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "11c",
                            TeacherId = 23
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            Name = "12a",
                            TeacherId = 24
                        },
                        new
                        {
                            Id = 5,
                            IsDeleted = false,
                            Name = "8b",
                            TeacherId = 25
                        },
                        new
                        {
                            Id = 6,
                            IsDeleted = false,
                            Name = "7a",
                            TeacherId = 26
                        },
                        new
                        {
                            Id = 7,
                            IsDeleted = false,
                            Name = "6c",
                            TeacherId = 27
                        },
                        new
                        {
                            Id = 8,
                            IsDeleted = false,
                            Name = "10a",
                            TeacherId = 28
                        },
                        new
                        {
                            Id = 9,
                            IsDeleted = false,
                            Name = "9b",
                            TeacherId = 29
                        },
                        new
                        {
                            Id = 10,
                            IsDeleted = false,
                            Name = "11a",
                            TeacherId = 30
                        });
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.ClassCourse", b =>
                {
                    b.Property<int>("ClassId")
                        .HasColumnType("int")
                        .HasComment("Class Identifier");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasComment("Course Identifier");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date of enrollment");

                    b.HasKey("ClassId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("ClassCourses");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Course Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Course Description");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasComment("Course End Date");

                    b.Property<int>("EnrollmentCap")
                        .HasColumnType("int")
                        .HasComment("Maximum number of students allowed");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Shows if course is Deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Course Name");

                    b.Property<string>("PublisherId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Publisher Identification");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasComment("Course Start Date");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int")
                        .HasComment("Teacher of the Course");

                    b.HasKey("Id");

                    b.HasIndex("PublisherId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Best biology learning system in the world",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnrollmentCap = 0,
                            IsDeleted = false,
                            Name = "Biology",
                            PublisherId = "1",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TeacherId = 21
                        },
                        new
                        {
                            Id = 2,
                            Description = "Best history learning system in the world",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnrollmentCap = 0,
                            IsDeleted = false,
                            Name = "History",
                            PublisherId = "1",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TeacherId = 22
                        },
                        new
                        {
                            Id = 3,
                            Description = "Comprehensive mathematics curriculum for all levels",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnrollmentCap = 0,
                            IsDeleted = false,
                            Name = "Mathematics",
                            PublisherId = "2",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TeacherId = 23
                        },
                        new
                        {
                            Id = 4,
                            Description = "Advanced physics concepts and practical applications",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnrollmentCap = 0,
                            IsDeleted = false,
                            Name = "Physics",
                            PublisherId = "2",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TeacherId = 24
                        },
                        new
                        {
                            Id = 5,
                            Description = "Exploring the fundamentals of chemistry",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnrollmentCap = 0,
                            IsDeleted = false,
                            Name = "Chemistry",
                            PublisherId = "3",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TeacherId = 25
                        },
                        new
                        {
                            Id = 6,
                            Description = "In-depth analysis of classic and modern literature",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnrollmentCap = 0,
                            IsDeleted = false,
                            Name = "English Literature",
                            PublisherId = "3",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TeacherId = 26
                        },
                        new
                        {
                            Id = 7,
                            Description = "Programming, algorithms, and computing fundamentals",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnrollmentCap = 0,
                            IsDeleted = false,
                            Name = "Computer Science",
                            PublisherId = "4",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TeacherId = 27
                        },
                        new
                        {
                            Id = 8,
                            Description = "Understanding economic systems, theories, and policies",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnrollmentCap = 0,
                            IsDeleted = false,
                            Name = "Economics",
                            PublisherId = "4",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TeacherId = 28
                        },
                        new
                        {
                            Id = 9,
                            Description = "Exploring the earth's physical features and human geography",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnrollmentCap = 0,
                            IsDeleted = false,
                            Name = "Geography",
                            PublisherId = "5",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TeacherId = 29
                        },
                        new
                        {
                            Id = 10,
                            Description = "The study of art movements, artists, and their works",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnrollmentCap = 0,
                            IsDeleted = false,
                            Name = "Art History",
                            PublisherId = "5",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TeacherId = 30
                        });
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique Identifier for the Grade entry");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasComment("Identifier of the Course");

                    b.Property<DateTime>("GradeAssignedDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date when the grade was assigned");

                    b.Property<double>("GradeScore")
                        .HasColumnType("float")
                        .HasComment("Grade received by the student for a specific course assessment");

                    b.Property<string>("GradeType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Description or type of the grade (e.g., Midterm, Final, Homework)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Shows if grade is Deleted");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasComment("Identifier of the Student");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Remark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Remark Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasComment("Course Identifier");

                    b.Property<string>("RemarkText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Remark Text");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasComment("Student Identifier");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int")
                        .HasComment("Teacher Identifier");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Remarks");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Student Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassId")
                        .HasColumnType("int")
                        .HasComment("Class Identifier");

                    b.Property<string>("ContactDetails")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Student Contact Details");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasComment("Date of birth of Student");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Student Email Address");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Student First Name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Shows if student is Deleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Student Last Name");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Student Middle Name");

                    b.Property<double>("Performance")
                        .HasColumnType("float")
                        .HasComment("Student Performance");

                    b.Property<string>("PersonalId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("Student Personal Identification Number");

                    b.Property<string>("ProfilePicturePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Path to the profile picture of the student");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User Identifier");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("UserId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClassId = 3,
                            ContactDetails = "GSM:882163890",
                            DateOfBirth = new DateTime(2006, 11, 24, 23, 53, 22, 983, DateTimeKind.Local).AddTicks(9298),
                            Email = "ivan414@gmail.com",
                            FirstName = "Ivan",
                            IsDeleted = false,
                            LastName = "Petrov",
                            MiddleName = "Grigorov",
                            Performance = 0.0,
                            PersonalId = "9564039305",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            UserId = "1"
                        },
                        new
                        {
                            Id = 2,
                            ClassId = 5,
                            ContactDetails = "GSM:889556992",
                            DateOfBirth = new DateTime(2007, 11, 24, 23, 53, 22, 983, DateTimeKind.Local).AddTicks(9368),
                            Email = "maria270@gmail.com",
                            FirstName = "Maria",
                            IsDeleted = false,
                            LastName = "Grigorov",
                            MiddleName = "Georgiev",
                            Performance = 0.0,
                            PersonalId = "6934567210",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            UserId = "2"
                        },
                        new
                        {
                            Id = 3,
                            ClassId = 5,
                            ContactDetails = "GSM:883854732",
                            DateOfBirth = new DateTime(2007, 11, 24, 23, 53, 22, 983, DateTimeKind.Local).AddTicks(9374),
                            Email = "elena309@gmail.com",
                            FirstName = "Elena",
                            IsDeleted = false,
                            LastName = "Todorov",
                            MiddleName = "Grigorov",
                            Performance = 0.0,
                            PersonalId = "3699302616",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            UserId = "3"
                        },
                        new
                        {
                            Id = 4,
                            ClassId = 4,
                            ContactDetails = "GSM:886992374",
                            DateOfBirth = new DateTime(2006, 11, 24, 23, 53, 22, 983, DateTimeKind.Local).AddTicks(9378),
                            Email = "viktor725@gmail.com",
                            FirstName = "Viktor",
                            IsDeleted = false,
                            LastName = "Todorov",
                            MiddleName = "Todorov",
                            Performance = 0.0,
                            PersonalId = "2940063663",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            UserId = "4"
                        },
                        new
                        {
                            Id = 5,
                            ClassId = 2,
                            ContactDetails = "GSM:884738222",
                            DateOfBirth = new DateTime(2008, 11, 24, 23, 53, 22, 983, DateTimeKind.Local).AddTicks(9382),
                            Email = "pesho278@gmail.com",
                            FirstName = "Pesho",
                            IsDeleted = false,
                            LastName = "Nikolov",
                            MiddleName = "Nikolov",
                            Performance = 0.0,
                            PersonalId = "4204190914",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            UserId = "5"
                        },
                        new
                        {
                            Id = 6,
                            ClassId = 1,
                            ContactDetails = "GSM:888183734",
                            DateOfBirth = new DateTime(2005, 11, 24, 23, 53, 22, 983, DateTimeKind.Local).AddTicks(9388),
                            Email = "nina.borisova@gmail.com",
                            FirstName = "Nina",
                            IsDeleted = false,
                            LastName = "Todorova",
                            MiddleName = "Borisova",
                            Performance = 0.0,
                            PersonalId = "5392831842",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            UserId = "6"
                        },
                        new
                        {
                            Id = 7,
                            ClassId = 1,
                            ContactDetails = "GSM:883764543",
                            DateOfBirth = new DateTime(2004, 11, 24, 23, 53, 22, 983, DateTimeKind.Local).AddTicks(9402),
                            Email = "ivo.pavlov@gmail.com",
                            FirstName = "Ivo",
                            IsDeleted = false,
                            LastName = "Pavlov",
                            MiddleName = "Petrov",
                            Performance = 0.0,
                            PersonalId = "6758374932",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            UserId = "7"
                        },
                        new
                        {
                            Id = 8,
                            ClassId = 3,
                            ContactDetails = "GSM:882847361",
                            DateOfBirth = new DateTime(2003, 11, 24, 23, 53, 22, 983, DateTimeKind.Local).AddTicks(9407),
                            Email = "katerina.gancheva@gmail.com",
                            FirstName = "Katerina",
                            IsDeleted = false,
                            LastName = "Gancheva",
                            MiddleName = "Alexandrova",
                            Performance = 0.0,
                            PersonalId = "8293840598",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            UserId = "8"
                        },
                        new
                        {
                            Id = 9,
                            ClassId = 4,
                            ContactDetails = "GSM:887654321",
                            DateOfBirth = new DateTime(2002, 11, 24, 23, 53, 22, 983, DateTimeKind.Local).AddTicks(9414),
                            Email = "dimitar.mihailov@gmail.com",
                            FirstName = "Dimitar",
                            IsDeleted = false,
                            LastName = "Mihailov",
                            MiddleName = "Georgiev",
                            Performance = 0.0,
                            PersonalId = "9382843621",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            UserId = "9"
                        },
                        new
                        {
                            Id = 10,
                            ClassId = 5,
                            ContactDetails = "GSM:885676543",
                            DateOfBirth = new DateTime(2001, 11, 24, 23, 53, 22, 983, DateTimeKind.Local).AddTicks(9419),
                            Email = "stefan.yordanov@gmail.com",
                            FirstName = "Stefan",
                            IsDeleted = false,
                            LastName = "Yordanov",
                            MiddleName = "Ivanov",
                            Performance = 0.0,
                            PersonalId = "4902385726",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            UserId = "10"
                        },
                        new
                        {
                            Id = 11,
                            ClassId = 2,
                            ContactDetails = "GSM:882364788",
                            DateOfBirth = new DateTime(2004, 11, 24, 23, 53, 22, 983, DateTimeKind.Local).AddTicks(9428),
                            Email = "diana.ruseva@gmail.com",
                            FirstName = "Diana",
                            IsDeleted = false,
                            LastName = "Ruseva",
                            MiddleName = "Stoyanova",
                            Performance = 0.0,
                            PersonalId = "2945641207",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            UserId = "11"
                        },
                        new
                        {
                            Id = 12,
                            ClassId = 3,
                            ContactDetails = "GSM:889276400",
                            DateOfBirth = new DateTime(2003, 11, 24, 23, 53, 22, 983, DateTimeKind.Local).AddTicks(9432),
                            Email = "petar.georgiev@gmail.com",
                            FirstName = "Petar",
                            IsDeleted = false,
                            LastName = "Georgiev",
                            MiddleName = "Zahariev",
                            Performance = 0.0,
                            PersonalId = "1298345761",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            UserId = "12"
                        },
                        new
                        {
                            Id = 13,
                            ClassId = 4,
                            ContactDetails = "GSM:883712508",
                            DateOfBirth = new DateTime(2005, 11, 24, 23, 53, 22, 983, DateTimeKind.Local).AddTicks(9436),
                            Email = "tanya.ivanova@gmail.com",
                            FirstName = "Tanya",
                            IsDeleted = false,
                            LastName = "Ivanova",
                            MiddleName = "Vasileva",
                            Performance = 0.0,
                            PersonalId = "8471629304",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            UserId = "13"
                        },
                        new
                        {
                            Id = 14,
                            ClassId = 2,
                            ContactDetails = "GSM:887327015",
                            DateOfBirth = new DateTime(2006, 11, 24, 23, 53, 22, 983, DateTimeKind.Local).AddTicks(9441),
                            Email = "aleksandar.pavlov@gmail.com",
                            FirstName = "Aleksandar",
                            IsDeleted = false,
                            LastName = "Pavlov",
                            MiddleName = "Dimitrov",
                            Performance = 0.0,
                            PersonalId = "6503849201",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            UserId = "14"
                        },
                        new
                        {
                            Id = 15,
                            ClassId = 5,
                            ContactDetails = "GSM:888014697",
                            DateOfBirth = new DateTime(2004, 11, 24, 23, 53, 22, 983, DateTimeKind.Local).AddTicks(9445),
                            Email = "julia.dimitrova@gmail.com",
                            FirstName = "Julia",
                            IsDeleted = false,
                            LastName = "Dimitrova",
                            MiddleName = "Borisova",
                            Performance = 0.0,
                            PersonalId = "8473926140",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            UserId = "15"
                        },
                        new
                        {
                            Id = 16,
                            ClassId = 1,
                            ContactDetails = "GSM:884728672",
                            DateOfBirth = new DateTime(2006, 11, 24, 23, 53, 22, 983, DateTimeKind.Local).AddTicks(9465),
                            Email = "kiril.kolarov@gmail.com",
                            FirstName = "Kiril",
                            IsDeleted = false,
                            LastName = "Kolarov",
                            MiddleName = "Vasilev",
                            Performance = 0.0,
                            PersonalId = "5392837362",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            UserId = "16"
                        },
                        new
                        {
                            Id = 17,
                            ClassId = 3,
                            ContactDetails = "GSM:889253738",
                            DateOfBirth = new DateTime(2002, 11, 24, 23, 53, 22, 983, DateTimeKind.Local).AddTicks(9470),
                            Email = "daniela.todorova@gmail.com",
                            FirstName = "Daniela",
                            IsDeleted = false,
                            LastName = "Todorova",
                            MiddleName = "Dimitrova",
                            Performance = 0.0,
                            PersonalId = "8282020193",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            UserId = "17"
                        },
                        new
                        {
                            Id = 18,
                            ClassId = 4,
                            ContactDetails = "GSM:888107316",
                            DateOfBirth = new DateTime(2003, 11, 24, 23, 53, 22, 983, DateTimeKind.Local).AddTicks(9474),
                            Email = "lazar.grigorov@gmail.com",
                            FirstName = "Lazar",
                            IsDeleted = false,
                            LastName = "Grigorov",
                            MiddleName = "Nikolov",
                            Performance = 0.0,
                            PersonalId = "9273628105",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            UserId = "18"
                        },
                        new
                        {
                            Id = 19,
                            ClassId = 2,
                            ContactDetails = "GSM:887726051",
                            DateOfBirth = new DateTime(2008, 11, 24, 23, 53, 22, 983, DateTimeKind.Local).AddTicks(9479),
                            Email = "ivanka.nikolova@gmail.com",
                            FirstName = "Ivanka",
                            IsDeleted = false,
                            LastName = "Nikolova",
                            MiddleName = "Georgieva",
                            Performance = 0.0,
                            PersonalId = "3846204951",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            UserId = "19"
                        },
                        new
                        {
                            Id = 20,
                            ClassId = 5,
                            ContactDetails = "GSM:883467150",
                            DateOfBirth = new DateTime(2005, 11, 24, 23, 53, 22, 983, DateTimeKind.Local).AddTicks(9483),
                            Email = "gergana.georgieva@gmail.com",
                            FirstName = "Gergana",
                            IsDeleted = false,
                            LastName = "Georgieva",
                            MiddleName = "Todorova",
                            Performance = 0.0,
                            PersonalId = "1294956172",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            UserId = "20"
                        });
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Teacher Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactDetails")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Teacher Contact Details");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Student Email Address");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Teacher First Name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Shows if teacher is Deleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Teacher Last Name");

                    b.Property<string>("ProfilePicturePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Path to the profile picture of the student");

                    b.Property<string>("Titles")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Teacher Titles");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User Identifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = 21,
                            ContactDetails = "for more info visit ...",
                            Email = "stan12@gmail.com",
                            FirstName = "Stanimir",
                            IsDeleted = false,
                            LastName = "Grigorov",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            Titles = "prof. dr. ",
                            UserId = "21"
                        },
                        new
                        {
                            Id = 22,
                            ContactDetails = "gsm:12345678655",
                            Email = "ivdra23@gmail.com",
                            FirstName = "Ivan",
                            IsDeleted = false,
                            LastName = "Draganov",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            Titles = "doc. ",
                            UserId = "22"
                        },
                        new
                        {
                            Id = 23,
                            ContactDetails = "gsm:0987654321",
                            Email = "mariya.petrova@gmail.com",
                            FirstName = "Mariya",
                            IsDeleted = false,
                            LastName = "Petrova",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            Titles = "assoc. prof. ",
                            UserId = "23"
                        },
                        new
                        {
                            Id = 24,
                            ContactDetails = "email: nikolai@university.com",
                            Email = "nikolai.vasilev@gmail.com",
                            FirstName = "Nikolai",
                            IsDeleted = false,
                            LastName = "Vasilev",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            Titles = "prof. dr. ",
                            UserId = "24"
                        },
                        new
                        {
                            Id = 25,
                            ContactDetails = "for inquiries, email me",
                            Email = "radoslav.ivanov@gmail.com",
                            FirstName = "Radoslav",
                            IsDeleted = false,
                            LastName = "Ivanov",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            Titles = "lect. ",
                            UserId = "25"
                        },
                        new
                        {
                            Id = 26,
                            ContactDetails = "gsm:0551237894",
                            Email = "katerina.dimitrova@gmail.com",
                            FirstName = "Katerina",
                            IsDeleted = false,
                            LastName = "Dimitrova",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            Titles = "assoc. prof. ",
                            UserId = "26"
                        },
                        new
                        {
                            Id = 27,
                            ContactDetails = "gsm:0876543210",
                            Email = "petar.georgiev@gmail.com",
                            FirstName = "Petar",
                            IsDeleted = false,
                            LastName = "Georgiev",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            Titles = "lect. ",
                            UserId = "27"
                        },
                        new
                        {
                            Id = 28,
                            ContactDetails = "email: lidia@faculty.com",
                            Email = "lidia.todorova@gmail.com",
                            FirstName = "Lidia",
                            IsDeleted = false,
                            LastName = "Todorova",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            Titles = "prof. ",
                            UserId = "28"
                        },
                        new
                        {
                            Id = 29,
                            ContactDetails = "gsm:022112233",
                            Email = "stefan.kovachev@gmail.com",
                            FirstName = "Stefan",
                            IsDeleted = false,
                            LastName = "Kovachev",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            Titles = "doc. ",
                            UserId = "29"
                        },
                        new
                        {
                            Id = 30,
                            ContactDetails = "email: valentina.nikolova@edu.com",
                            Email = "valentina.nikolova@gmail.com",
                            FirstName = "Valentina",
                            IsDeleted = false,
                            LastName = "Nikolova",
                            ProfilePicturePath = "images/profiles/default.jpg",
                            Titles = "prof. dr. ",
                            UserId = "30"
                        });
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("First name of the user.");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Last name of the user.");

                    b.Property<string>("PersonalId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("Personal ID is a unique identifier for each person.");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Absence", b =>
                {
                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.Student", "Student")
                        .WithMany("Аbsences")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Class", b =>
                {
                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.Teacher", "Teacher")
                        .WithMany("Classes")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.ClassCourse", b =>
                {
                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.Class", "Class")
                        .WithMany("ClassCourses")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.Course", "Course")
                        .WithMany("CourseClasses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Course", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.Teacher", "Teacher")
                        .WithMany("Courses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Publisher");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Grade", b =>
                {
                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.Course", "Course")
                        .WithMany("Grades")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.Student", "Student")
                        .WithMany("Grades")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Remark", b =>
                {
                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.Student", "Student")
                        .WithMany("Remarks")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Student", b =>
                {
                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.Class", "Class")
                        .WithMany("Students")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Teacher", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Class", b =>
                {
                    b.Navigation("ClassCourses");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Course", b =>
                {
                    b.Navigation("CourseClasses");

                    b.Navigation("Grades");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Student", b =>
                {
                    b.Navigation("Grades");

                    b.Navigation("Remarks");

                    b.Navigation("Аbsences");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Teacher", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
