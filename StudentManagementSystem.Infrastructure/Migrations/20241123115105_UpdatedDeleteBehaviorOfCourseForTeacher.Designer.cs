// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudentManagementSystem.Infrastructure;

#nullable disable

namespace StudentManagementSystem.Infrastructure.Migrations
{
    [DbContext(typeof(StudentManagementDbContext))]
    [Migration("20241123115105_UpdatedDeleteBehaviorOfCourseForTeacher")]
    partial class UpdatedDeleteBehaviorOfCourseForTeacher
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4709a91b-7a38-47bb-a2d2-eae8af61638f",
                            Email = "ivan414@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVAN414@GMAIL.COM",
                            NormalizedUserName = "IVAN414@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGLGP9dLhnRI2ri8Sr8QjjbME0ixMkFTvkAhzOB0OM/0WMtS7zvzfi7WNnTrMfAkvQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1157cd2c-d22f-43c3-a53b-d314155bb07a",
                            TwoFactorEnabled = false,
                            UserName = "ivan414@gmail.com"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "71305b56-1ee8-4859-ad95-050c47a45c43",
                            Email = "maria270@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARIA270@GMAIL.COM",
                            NormalizedUserName = "MARIA270@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFx3OQfs8ltYOXZ/EPFlJIr8q1zrxs/BQtDUiQuTrgitFLZoRKq7Xvmu/9nxIY+Eqw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7457b47b-7fd1-4cb1-b2ef-251854359716",
                            TwoFactorEnabled = false,
                            UserName = "maria270@gmail.com"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "25c1c243-6b86-47b7-93cd-904531ca89b8",
                            Email = "elena309@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ELENA309@GMAIL.COM",
                            NormalizedUserName = "ELENA309@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGFbnuW5wgCC8lDK7wnt8FvUw7WJ2049JpBB9Qslo/39isQ8Uv4aVL2cJJtv2fvF7g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "faef665b-a8ac-4955-aa96-c2b9e995dcd9",
                            TwoFactorEnabled = false,
                            UserName = "elena309@gmail.com"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ec68c533-ee7e-422f-8c3c-e55ea58eeafe",
                            Email = "viktor725@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "VIKTOR725@GMAIL.COM",
                            NormalizedUserName = "VIKTOR725@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEB3a0y5bHn3eTqoodjj3z47VfF66nD7R/Cb+yld29Kxt6f46x6CTIw2dqi8l29APTw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2d0bcbf0-df9a-49fe-904c-34caba636f20",
                            TwoFactorEnabled = false,
                            UserName = "viktor725@gmail.com"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b2459e4f-7bd6-483d-941d-f521b42b06c1",
                            Email = "pesho278@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PESHO278@GMAIL.COM",
                            NormalizedUserName = "PESHO278@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN0sng0SEDvdspXXBc1/hkKDkflWZQeeGOb9r1jGzJyD0A5RDi/fG87oVLkYl9xzTw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "80bf71e9-644b-4759-a4b8-96ee19c7002d",
                            TwoFactorEnabled = false,
                            UserName = "pesho278@gmail.com"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "98136457-754b-4f8f-8aa5-5e2a51ad909e",
                            Email = "nina.borisova@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "NINA.BORISOVA@GMAIL.COM",
                            NormalizedUserName = "NINA.BORISOVA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIKZfUgegDVy/Nud6EXSVG6o7w0PTXTa4dWALn5dv2plOQZ7tO7AYFe34R880zSEqA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fdbbb31c-c0fa-4191-bf16-90c2a5ef3eff",
                            TwoFactorEnabled = false,
                            UserName = "nina.borisova@gmail.com"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "50596ff1-0c9b-4d61-9d77-c780cf3fc8b2",
                            Email = "ivo.pavlov@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVO.PAVLOV@GMAIL.COM",
                            NormalizedUserName = "IVO.PAVLOV@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIP7785nqdLTK8MOIcqRMjYOafQzsqpuPd99pG3ZbnLVC+D60VqlRHchNJxjco75xQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "735f8813-855c-4106-9e32-3bebfc098ada",
                            TwoFactorEnabled = false,
                            UserName = "ivo.pavlov@gmail.com"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ba51729f-0901-4fd9-9681-5335e872722c",
                            Email = "katerina.gancheva@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "KATERINA.GANCHEVA@GMAIL.COM",
                            NormalizedUserName = "KATERINA.GANCHEVA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAVCkJGNtOovfFPcCOF8MbGHEosS+/L6sOATBrAbTp6zeigHHBcuNV+xn3QnqH1eFA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "311326eb-e919-42d0-9902-c3fab4a58948",
                            TwoFactorEnabled = false,
                            UserName = "katerina.gancheva@gmail.com"
                        },
                        new
                        {
                            Id = "9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "befcec89-53fe-4e24-80e2-23e0397d3d45",
                            Email = "dimitar.mihailov@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DIMITAR.MIHAILOV@GMAIL.COM",
                            NormalizedUserName = "DIMITAR.MIHAILOV@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAED5qhF0ojomQpV9D/TDqVYmixuJzwD5Xtu01Jb/jLHC0g9uw3b4m9g+ySRf7CRf97A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7d978793-1ffb-4e79-914b-470f7e55d294",
                            TwoFactorEnabled = false,
                            UserName = "dimitar.mihailov@gmail.com"
                        },
                        new
                        {
                            Id = "10",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "48356931-03a9-436d-aeed-5a2cf2add3bc",
                            Email = "stefan.yordanov@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STEFAN.YORDANOV@GMAIL.COM",
                            NormalizedUserName = "STEFAN.YORDANOV@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDHCf23F37P7B/b7ukUTcL22pj7lCWZFeKajbuBSU0SB/IP44BJS1/CQWwXDzSubzw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9cd9bf6f-c993-4e5a-8a8b-9dd8002d0345",
                            TwoFactorEnabled = false,
                            UserName = "stefan.yordanov@gmail.com"
                        },
                        new
                        {
                            Id = "11",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2dede1e2-b96f-4976-a9e3-1350dc04c55f",
                            Email = "diana.ruseva@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DIANA.RUSEVA@GMAIL.COM",
                            NormalizedUserName = "DIANA.RUSEVA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAlR5RS/boZwMMOcothn0x2eLIEEPbABKDDMonDhxBzV8+D154YLHmvyUi1at3R1iw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ca077863-db67-4f5c-a20c-f27a1f8b334e",
                            TwoFactorEnabled = false,
                            UserName = "diana.ruseva@gmail.com"
                        },
                        new
                        {
                            Id = "12",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6135bcd7-2d14-401c-805c-fbf34ad12d37",
                            Email = "petar.georgiev@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PETAR.GEORGIEV@GMAIL.COM",
                            NormalizedUserName = "PETAR.GEORGIEV@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGMtrcqvczDp+VHBdsjYlNqz4nmm1fGxkRaPZdunyFbBcqXLNLZQjPGCWFSAC7D9Hg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0fac6c2b-daef-4deb-b6b4-1655d9eedafa",
                            TwoFactorEnabled = false,
                            UserName = "petar.georgiev@gmail.com"
                        },
                        new
                        {
                            Id = "13",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "683289f3-aba5-4c99-9e3a-abbb46065aa5",
                            Email = "tanya.ivanova@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TANYA.IVANOVA@GMAIL.COM",
                            NormalizedUserName = "TANYA.IVANOVA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJiXj9vfi2GDZXYgW4mKYcJIFMYNuXC+1lIgx6m+jwU/80T1+0uY8EAfK2zO7AR9wQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8eff1371-ade1-4703-aedb-b151e6da7221",
                            TwoFactorEnabled = false,
                            UserName = "tanya.ivanova@gmail.com"
                        },
                        new
                        {
                            Id = "14",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c2c496ee-fbdc-41fb-bb81-3992697d31a3",
                            Email = "aleksandar.pavlov@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALEKSANDAR.PAVLOV@GMAIL.COM",
                            NormalizedUserName = "ALEKSANDAR.PAVLOV@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELy2sVNG/6KcWSBMJVr/DF9W8I/FyqUgYVc/AEMp7hZ4muH0hJFP4uMT4hn90mx3vw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1b0b2990-876e-4257-ab5d-7e35ec018083",
                            TwoFactorEnabled = false,
                            UserName = "aleksandar.pavlov@gmail.com"
                        },
                        new
                        {
                            Id = "15",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "36a9467f-b378-4fab-ad5f-57f28045ce5f",
                            Email = "julia.dimitrova@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JULIA.DIMITROVA@GMAIL.COM",
                            NormalizedUserName = "JULIA.DIMITROVA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBOAqU0WKAaTpjEtqcoS1yLVR4Pq5WQ8Tv5TdE0aJY1YptAN9P2RPKKk+MHRpARyPA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "53eca6e1-c9fc-43f6-ade1-51f24ba5c539",
                            TwoFactorEnabled = false,
                            UserName = "julia.dimitrova@gmail.com"
                        },
                        new
                        {
                            Id = "16",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "289cb9fa-640a-458a-ba3c-649766aa5898",
                            Email = "kiril.kolarov@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "KIRIL.KOLAROV@GMAIL.COM",
                            NormalizedUserName = "KIRIL.KOLAROV@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAHnoP+PPnk7oOS+7/f5FT2qbB6A40RRD7/u6jHL0ZxibNxFGHOJW9Oj0UgSQdVRjw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "87c7a4f7-1c9e-465e-9b57-4bd9120a5953",
                            TwoFactorEnabled = false,
                            UserName = "kiril.kolarov@gmail.com"
                        },
                        new
                        {
                            Id = "17",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d395a382-1357-484e-a8d1-fdeabc2cb33f",
                            Email = "daniela.todorova@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DANIELA.TODOROVA@GMAIL.COM",
                            NormalizedUserName = "DANIELA.TODOROVA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKk+6WBwiI/X+CMFXPsuU0YRFszjgQZfIsOcHSwZGGO3H5ObOsihWZf0fsmc8RSgIQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "45f5ce12-0422-4fbb-8446-1dd320b27fcb",
                            TwoFactorEnabled = false,
                            UserName = "daniela.todorova@gmail.com"
                        },
                        new
                        {
                            Id = "18",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "95207373-ac88-490d-87d5-7a4c2bbfe607",
                            Email = "lazar.grigorov@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "LAZAR.GRIGOROV@GMAIL.COM",
                            NormalizedUserName = "LAZAR.GRIGOROV@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJpEbBfrC84xsgGmf/3+5p8tgWaaZ/nURtsUgnC1VRTaaZ4b2gXDTjG6r0CCd18ncw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "38097f49-e7e5-4a97-899b-cce3153c3b18",
                            TwoFactorEnabled = false,
                            UserName = "lazar.grigorov@gmail.com"
                        },
                        new
                        {
                            Id = "19",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b882c453-5b30-4a44-87ad-c30b915cc957",
                            Email = "ivanka.nikolova@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVANKA.NIKOLOVA@GMAIL.COM",
                            NormalizedUserName = "IVANKA.NIKOLOVA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIRS45TPPYY1GTdoSSmlKOTH0JDHuaj2qiKjAB5W9m4sfPGqjykBAg5FdYZgW2OO/A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f4c75393-a936-4f85-a4a9-ba870a6ea8c3",
                            TwoFactorEnabled = false,
                            UserName = "ivanka.nikolova@gmail.com"
                        },
                        new
                        {
                            Id = "20",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "11e55c44-2f35-43e3-b154-93b1a121a676",
                            Email = "gergana.georgieva@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "GERGANA.GEORGIEVA@GMAIL.COM",
                            NormalizedUserName = "GERGANA.GEORGIEVA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPw9C8BdOaGxmyuEX69QNSrimwawRl90/XBNatkpkOMPzTVqmDxtfHWGeEPyUKGBjQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8c2b6fa5-b45c-4e3e-ad17-7ea50a4fae37",
                            TwoFactorEnabled = false,
                            UserName = "gergana.georgieva@gmail.com"
                        },
                        new
                        {
                            Id = "21",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "909f95b3-3ddd-4077-bc6a-5cae1a143705",
                            Email = "stan12@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STAN12@GMAIL.COM",
                            NormalizedUserName = "STAN12@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN+YTAg4qmjOQYsxqucdfA8BYxtq427KhWdH73eRyIcIrqJYcwIedR53oLypeCO6/w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "stan12@gmail.com"
                        },
                        new
                        {
                            Id = "22",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f44a6b4a-4111-42f3-8ee4-ff3a32246909",
                            Email = "ivdra23@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVDRA23@GMAIL.COM",
                            NormalizedUserName = "IVDRA23@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGr+Xwdmo2IANHNQBHJkOxg8BF0Es8oWhJl0fVmkmT1W3EY27dvucYbkU4gZ6QwHpg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "ivdra23@gmail.com"
                        },
                        new
                        {
                            Id = "23",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d5a22b68-80fc-4d68-a3ab-5fae1841228f",
                            Email = "mariya.petrova@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARIYA.PETROVA@GMAIL.COM",
                            NormalizedUserName = "MARIYA.PETROVA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEK42wsHxW9hoKshQs7v+1TsOq82BXOz11dHDSkTYOvfgh6hTu3JZ6wK/bYRfYpFB6w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "mariya.petrova@gmail.com"
                        },
                        new
                        {
                            Id = "24",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5a64acc4-393a-4326-b337-31cc84e4fc00",
                            Email = "nikolai.vasilev@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "NIKOLAI.VASILEV@GMAIL.COM",
                            NormalizedUserName = "NIKOLAI.VASILEV@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGhvpMVfIE5gGLn9VrGR9tzD8llqPojqr0BESOTL5diq97DcEv1WTePdebvYgqiWvA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "nikolai.vasilev@gmail.com"
                        },
                        new
                        {
                            Id = "25",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "73e0db72-5817-4547-8692-37d7b36c3524",
                            Email = "radoslav.ivanov@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "RADOSLAV.IVANOV@GMAIL.COM",
                            NormalizedUserName = "RADOSLAV.IVANOV@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECoqL9YodbFyRDgDdNrXwICTczyFrocPj35JQidcdaRNV/CVDQH3YFrvfqhdk2Di+Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "radoslav.ivanov@gmail.com"
                        },
                        new
                        {
                            Id = "26",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1b6b3d33-31ba-4fe9-b34d-798d96e75cd4",
                            Email = "katerina.dimitrova@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "KATERINA.DIMITROVA@GMAIL.COM",
                            NormalizedUserName = "KATERINA.DIMITROVA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPbdn1uGovumBU+fTDTlvtg+X2vIP10lQYx6CZoPzDfGYiupqs8mr8BKnLjF5oeRWA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "katerina.dimitrova@gmail.com"
                        },
                        new
                        {
                            Id = "27",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d1d20d04-6555-493a-b99c-b550af58e1b4",
                            Email = "gosho.georgiev@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "GOSHO.GEORGIEV@GMAIL.COM",
                            NormalizedUserName = "GOSHO.GEORGIEV@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMqZPOaaaZbV5EY+CzuThQ/0WGDJczYVSvsbUfxvUJqQVFYIr91c0z+jnOqVpndUxw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "gosho.georgiev@gmail.com"
                        },
                        new
                        {
                            Id = "28",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c09f3236-161e-409c-84c1-eb7f3718c6d2",
                            Email = "lidia.todorova@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "LIDIA.TODOROVA@GMAIL.COM",
                            NormalizedUserName = "LIDIA.TODOROVA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECef+pE7JAzgBXhyGzMBfEqeyJIfQWTD5bhLa22463Cbkij/GcEy0k+KW7lz7FgeXg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "lidia.todorova@gmail.com"
                        },
                        new
                        {
                            Id = "29",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a3844f74-b986-491d-81fb-6d209adc3bec",
                            Email = "stefan.kovachev@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STEFAN.KOVACHEV@GMAIL.COM",
                            NormalizedUserName = "STEFAN.KOVACHEV@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJhxAU4sg94jXgpyGLytMo4TAeDjB7UM1+oF1jBVurJB/lcp0Mt4f/gT6pW8eUGVew==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "stefan.kovachev@gmail.com"
                        },
                        new
                        {
                            Id = "30",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "68ce3dee-7aa8-4ab9-a346-6bc6c3781011",
                            Email = "valentina.nikolova@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "VALENTINA.NIKOLOVA@GMAIL.COM",
                            NormalizedUserName = "VALENTINA.NIKOLOVA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEObX0fpJjoz6eJjOmf7P+E8HPG1KM4lhQLFpPtsQWpQwNTqZNtSN+vuZ6gpBDJqdPQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "valentina.nikolova@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Absence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Absence Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasComment("Course Identifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasComment("Date of Absence");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasComment("Student Identifier");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("Absences");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Shows if class is Deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("The name of the class");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int")
                        .HasComment("The ID of the teacher for this class");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Classes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "10b",
                            TeacherId = 21
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "9a",
                            TeacherId = 22
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "11c",
                            TeacherId = 23
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            Name = "12a",
                            TeacherId = 24
                        },
                        new
                        {
                            Id = 5,
                            IsDeleted = false,
                            Name = "8b",
                            TeacherId = 25
                        },
                        new
                        {
                            Id = 6,
                            IsDeleted = false,
                            Name = "7a",
                            TeacherId = 26
                        },
                        new
                        {
                            Id = 7,
                            IsDeleted = false,
                            Name = "6c",
                            TeacherId = 27
                        },
                        new
                        {
                            Id = 8,
                            IsDeleted = false,
                            Name = "10a",
                            TeacherId = 28
                        },
                        new
                        {
                            Id = 9,
                            IsDeleted = false,
                            Name = "9b",
                            TeacherId = 29
                        },
                        new
                        {
                            Id = 10,
                            IsDeleted = false,
                            Name = "11a",
                            TeacherId = 30
                        });
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.ClassCourse", b =>
                {
                    b.Property<int>("ClassId")
                        .HasColumnType("int")
                        .HasComment("Class Identifier");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasComment("Course Identifier");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date of enrollment");

                    b.HasKey("ClassId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("ClassCourses");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Course Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Course Description");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasComment("Course End Date");

                    b.Property<int>("EnrollmentCap")
                        .HasColumnType("int")
                        .HasComment("Maximum number of students allowed");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Shows if course is Deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Course Name");

                    b.Property<string>("PublisherId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Publisher Identification");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasComment("Course Start Date");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int")
                        .HasComment("Teacher of the Course");

                    b.HasKey("Id");

                    b.HasIndex("PublisherId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Best biology learning system in the world",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnrollmentCap = 0,
                            IsDeleted = false,
                            Name = "Biology",
                            PublisherId = "1",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TeacherId = 21
                        },
                        new
                        {
                            Id = 2,
                            Description = "Best history learning system in the world",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnrollmentCap = 0,
                            IsDeleted = false,
                            Name = "History",
                            PublisherId = "1",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TeacherId = 22
                        },
                        new
                        {
                            Id = 3,
                            Description = "Comprehensive mathematics curriculum for all levels",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnrollmentCap = 0,
                            IsDeleted = false,
                            Name = "Mathematics",
                            PublisherId = "2",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TeacherId = 23
                        },
                        new
                        {
                            Id = 4,
                            Description = "Advanced physics concepts and practical applications",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnrollmentCap = 0,
                            IsDeleted = false,
                            Name = "Physics",
                            PublisherId = "2",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TeacherId = 24
                        },
                        new
                        {
                            Id = 5,
                            Description = "Exploring the fundamentals of chemistry",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnrollmentCap = 0,
                            IsDeleted = false,
                            Name = "Chemistry",
                            PublisherId = "3",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TeacherId = 25
                        },
                        new
                        {
                            Id = 6,
                            Description = "In-depth analysis of classic and modern literature",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnrollmentCap = 0,
                            IsDeleted = false,
                            Name = "English Literature",
                            PublisherId = "3",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TeacherId = 26
                        },
                        new
                        {
                            Id = 7,
                            Description = "Programming, algorithms, and computing fundamentals",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnrollmentCap = 0,
                            IsDeleted = false,
                            Name = "Computer Science",
                            PublisherId = "4",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TeacherId = 27
                        },
                        new
                        {
                            Id = 8,
                            Description = "Understanding economic systems, theories, and policies",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnrollmentCap = 0,
                            IsDeleted = false,
                            Name = "Economics",
                            PublisherId = "4",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TeacherId = 28
                        },
                        new
                        {
                            Id = 9,
                            Description = "Exploring the earth's physical features and human geography",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnrollmentCap = 0,
                            IsDeleted = false,
                            Name = "Geography",
                            PublisherId = "5",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TeacherId = 29
                        },
                        new
                        {
                            Id = 10,
                            Description = "The study of art movements, artists, and their works",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnrollmentCap = 0,
                            IsDeleted = false,
                            Name = "Art History",
                            PublisherId = "5",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TeacherId = 30
                        });
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique Identifier for the Grade entry");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasComment("Identifier of the Course");

                    b.Property<DateTime>("GradeAssignedDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date when the grade was assigned");

                    b.Property<double>("GradeScore")
                        .HasColumnType("float")
                        .HasComment("Grade received by the student for a specific course assessment");

                    b.Property<string>("GradeType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Description or type of the grade (e.g., Midterm, Final, Homework)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Shows if grade is Deleted");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasComment("Identifier of the Student");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Remark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Remark Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasComment("Course Identifier");

                    b.Property<string>("RemarkText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Remark Text");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasComment("Student Identifier");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int")
                        .HasComment("Teacher Identifier");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Remarks");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Student Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassId")
                        .HasColumnType("int")
                        .HasComment("Class Identifier");

                    b.Property<string>("ContactDetails")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Student Contact Details");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasComment("Date of birth of Student");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Student Email Address");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Student First Name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Shows if student is Deleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Student Last Name");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Student Middle Name");

                    b.Property<double>("Performance")
                        .HasColumnType("float")
                        .HasComment("Student Performance");

                    b.Property<string>("PersonalId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("Student Personal Identification Number");

                    b.Property<string>("ProfilePicturePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Path to the profile picture of the student");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User Identifier");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("UserId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClassId = 3,
                            ContactDetails = "GSM:882163890",
                            DateOfBirth = new DateTime(2006, 11, 23, 13, 51, 2, 335, DateTimeKind.Local).AddTicks(4691),
                            Email = "ivan414@gmail.com",
                            FirstName = "Ivan",
                            IsDeleted = false,
                            LastName = "Petrov",
                            MiddleName = "Grigorov",
                            Performance = 0.0,
                            PersonalId = "9564039305",
                            ProfilePicturePath = "images/profiles/default.png",
                            UserId = "1"
                        },
                        new
                        {
                            Id = 2,
                            ClassId = 5,
                            ContactDetails = "GSM:889556992",
                            DateOfBirth = new DateTime(2007, 11, 23, 13, 51, 2, 335, DateTimeKind.Local).AddTicks(4755),
                            Email = "maria270@gmail.com",
                            FirstName = "Maria",
                            IsDeleted = false,
                            LastName = "Grigorov",
                            MiddleName = "Georgiev",
                            Performance = 0.0,
                            PersonalId = "6934567210",
                            ProfilePicturePath = "images/profiles/default.png",
                            UserId = "2"
                        },
                        new
                        {
                            Id = 3,
                            ClassId = 5,
                            ContactDetails = "GSM:883854732",
                            DateOfBirth = new DateTime(2007, 11, 23, 13, 51, 2, 335, DateTimeKind.Local).AddTicks(4761),
                            Email = "elena309@gmail.com",
                            FirstName = "Elena",
                            IsDeleted = false,
                            LastName = "Todorov",
                            MiddleName = "Grigorov",
                            Performance = 0.0,
                            PersonalId = "3699302616",
                            ProfilePicturePath = "images/profiles/default.png",
                            UserId = "3"
                        },
                        new
                        {
                            Id = 4,
                            ClassId = 4,
                            ContactDetails = "GSM:886992374",
                            DateOfBirth = new DateTime(2006, 11, 23, 13, 51, 2, 335, DateTimeKind.Local).AddTicks(4766),
                            Email = "viktor725@gmail.com",
                            FirstName = "Viktor",
                            IsDeleted = false,
                            LastName = "Todorov",
                            MiddleName = "Todorov",
                            Performance = 0.0,
                            PersonalId = "2940063663",
                            ProfilePicturePath = "images/profiles/default.png",
                            UserId = "4"
                        },
                        new
                        {
                            Id = 5,
                            ClassId = 2,
                            ContactDetails = "GSM:884738222",
                            DateOfBirth = new DateTime(2008, 11, 23, 13, 51, 2, 335, DateTimeKind.Local).AddTicks(4770),
                            Email = "pesho278@gmail.com",
                            FirstName = "Pesho",
                            IsDeleted = false,
                            LastName = "Nikolov",
                            MiddleName = "Nikolov",
                            Performance = 0.0,
                            PersonalId = "4204190914",
                            ProfilePicturePath = "images/profiles/default.png",
                            UserId = "5"
                        },
                        new
                        {
                            Id = 6,
                            ClassId = 1,
                            ContactDetails = "GSM:888183734",
                            DateOfBirth = new DateTime(2005, 11, 23, 13, 51, 2, 335, DateTimeKind.Local).AddTicks(4775),
                            Email = "nina.borisova@gmail.com",
                            FirstName = "Nina",
                            IsDeleted = false,
                            LastName = "Todorova",
                            MiddleName = "Borisova",
                            Performance = 0.0,
                            PersonalId = "5392831842",
                            ProfilePicturePath = "images/profiles/default.png",
                            UserId = "6"
                        },
                        new
                        {
                            Id = 7,
                            ClassId = 1,
                            ContactDetails = "GSM:883764543",
                            DateOfBirth = new DateTime(2004, 11, 23, 13, 51, 2, 335, DateTimeKind.Local).AddTicks(4790),
                            Email = "ivo.pavlov@gmail.com",
                            FirstName = "Ivo",
                            IsDeleted = false,
                            LastName = "Pavlov",
                            MiddleName = "Petrov",
                            Performance = 0.0,
                            PersonalId = "6758374932",
                            ProfilePicturePath = "images/profiles/default.png",
                            UserId = "7"
                        },
                        new
                        {
                            Id = 8,
                            ClassId = 3,
                            ContactDetails = "GSM:882847361",
                            DateOfBirth = new DateTime(2003, 11, 23, 13, 51, 2, 335, DateTimeKind.Local).AddTicks(4795),
                            Email = "katerina.gancheva@gmail.com",
                            FirstName = "Katerina",
                            IsDeleted = false,
                            LastName = "Gancheva",
                            MiddleName = "Alexandrova",
                            Performance = 0.0,
                            PersonalId = "8293840598",
                            ProfilePicturePath = "images/profiles/default.png",
                            UserId = "8"
                        },
                        new
                        {
                            Id = 9,
                            ClassId = 4,
                            ContactDetails = "GSM:887654321",
                            DateOfBirth = new DateTime(2002, 11, 23, 13, 51, 2, 335, DateTimeKind.Local).AddTicks(4803),
                            Email = "dimitar.mihailov@gmail.com",
                            FirstName = "Dimitar",
                            IsDeleted = false,
                            LastName = "Mihailov",
                            MiddleName = "Georgiev",
                            Performance = 0.0,
                            PersonalId = "9382843621",
                            ProfilePicturePath = "images/profiles/default.png",
                            UserId = "9"
                        },
                        new
                        {
                            Id = 10,
                            ClassId = 5,
                            ContactDetails = "GSM:885676543",
                            DateOfBirth = new DateTime(2001, 11, 23, 13, 51, 2, 335, DateTimeKind.Local).AddTicks(4807),
                            Email = "stefan.yordanov@gmail.com",
                            FirstName = "Stefan",
                            IsDeleted = false,
                            LastName = "Yordanov",
                            MiddleName = "Ivanov",
                            Performance = 0.0,
                            PersonalId = "4902385726",
                            ProfilePicturePath = "images/profiles/default.png",
                            UserId = "10"
                        },
                        new
                        {
                            Id = 11,
                            ClassId = 2,
                            ContactDetails = "GSM:882364788",
                            DateOfBirth = new DateTime(2004, 11, 23, 13, 51, 2, 335, DateTimeKind.Local).AddTicks(4818),
                            Email = "diana.ruseva@gmail.com",
                            FirstName = "Diana",
                            IsDeleted = false,
                            LastName = "Ruseva",
                            MiddleName = "Stoyanova",
                            Performance = 0.0,
                            PersonalId = "2945641207",
                            ProfilePicturePath = "images/profiles/default.png",
                            UserId = "11"
                        },
                        new
                        {
                            Id = 12,
                            ClassId = 3,
                            ContactDetails = "GSM:889276400",
                            DateOfBirth = new DateTime(2003, 11, 23, 13, 51, 2, 335, DateTimeKind.Local).AddTicks(4823),
                            Email = "petar.georgiev@gmail.com",
                            FirstName = "Petar",
                            IsDeleted = false,
                            LastName = "Georgiev",
                            MiddleName = "Zahariev",
                            Performance = 0.0,
                            PersonalId = "1298345761",
                            ProfilePicturePath = "images/profiles/default.png",
                            UserId = "12"
                        },
                        new
                        {
                            Id = 13,
                            ClassId = 4,
                            ContactDetails = "GSM:883712508",
                            DateOfBirth = new DateTime(2005, 11, 23, 13, 51, 2, 335, DateTimeKind.Local).AddTicks(4828),
                            Email = "tanya.ivanova@gmail.com",
                            FirstName = "Tanya",
                            IsDeleted = false,
                            LastName = "Ivanova",
                            MiddleName = "Vasileva",
                            Performance = 0.0,
                            PersonalId = "8471629304",
                            ProfilePicturePath = "images/profiles/default.png",
                            UserId = "13"
                        },
                        new
                        {
                            Id = 14,
                            ClassId = 2,
                            ContactDetails = "GSM:887327015",
                            DateOfBirth = new DateTime(2006, 11, 23, 13, 51, 2, 335, DateTimeKind.Local).AddTicks(4833),
                            Email = "aleksandar.pavlov@gmail.com",
                            FirstName = "Aleksandar",
                            IsDeleted = false,
                            LastName = "Pavlov",
                            MiddleName = "Dimitrov",
                            Performance = 0.0,
                            PersonalId = "6503849201",
                            ProfilePicturePath = "images/profiles/default.png",
                            UserId = "14"
                        },
                        new
                        {
                            Id = 15,
                            ClassId = 5,
                            ContactDetails = "GSM:888014697",
                            DateOfBirth = new DateTime(2004, 11, 23, 13, 51, 2, 335, DateTimeKind.Local).AddTicks(4838),
                            Email = "julia.dimitrova@gmail.com",
                            FirstName = "Julia",
                            IsDeleted = false,
                            LastName = "Dimitrova",
                            MiddleName = "Borisova",
                            Performance = 0.0,
                            PersonalId = "8473926140",
                            ProfilePicturePath = "images/profiles/default.png",
                            UserId = "15"
                        },
                        new
                        {
                            Id = 16,
                            ClassId = 1,
                            ContactDetails = "GSM:884728672",
                            DateOfBirth = new DateTime(2006, 11, 23, 13, 51, 2, 335, DateTimeKind.Local).AddTicks(4860),
                            Email = "kiril.kolarov@gmail.com",
                            FirstName = "Kiril",
                            IsDeleted = false,
                            LastName = "Kolarov",
                            MiddleName = "Vasilev",
                            Performance = 0.0,
                            PersonalId = "5392837362",
                            ProfilePicturePath = "images/profiles/default.png",
                            UserId = "16"
                        },
                        new
                        {
                            Id = 17,
                            ClassId = 3,
                            ContactDetails = "GSM:889253738",
                            DateOfBirth = new DateTime(2002, 11, 23, 13, 51, 2, 335, DateTimeKind.Local).AddTicks(4865),
                            Email = "daniela.todorova@gmail.com",
                            FirstName = "Daniela",
                            IsDeleted = false,
                            LastName = "Todorova",
                            MiddleName = "Dimitrova",
                            Performance = 0.0,
                            PersonalId = "8282020193",
                            ProfilePicturePath = "images/profiles/default.png",
                            UserId = "17"
                        },
                        new
                        {
                            Id = 18,
                            ClassId = 4,
                            ContactDetails = "GSM:888107316",
                            DateOfBirth = new DateTime(2003, 11, 23, 13, 51, 2, 335, DateTimeKind.Local).AddTicks(4869),
                            Email = "lazar.grigorov@gmail.com",
                            FirstName = "Lazar",
                            IsDeleted = false,
                            LastName = "Grigorov",
                            MiddleName = "Nikolov",
                            Performance = 0.0,
                            PersonalId = "9273628105",
                            ProfilePicturePath = "images/profiles/default.png",
                            UserId = "18"
                        },
                        new
                        {
                            Id = 19,
                            ClassId = 2,
                            ContactDetails = "GSM:887726051",
                            DateOfBirth = new DateTime(2008, 11, 23, 13, 51, 2, 335, DateTimeKind.Local).AddTicks(4883),
                            Email = "ivanka.nikolova@gmail.com",
                            FirstName = "Ivanka",
                            IsDeleted = false,
                            LastName = "Nikolova",
                            MiddleName = "Georgieva",
                            Performance = 0.0,
                            PersonalId = "3846204951",
                            ProfilePicturePath = "images/profiles/default.png",
                            UserId = "19"
                        },
                        new
                        {
                            Id = 20,
                            ClassId = 5,
                            ContactDetails = "GSM:883467150",
                            DateOfBirth = new DateTime(2005, 11, 23, 13, 51, 2, 335, DateTimeKind.Local).AddTicks(4888),
                            Email = "gergana.georgieva@gmail.com",
                            FirstName = "Gergana",
                            IsDeleted = false,
                            LastName = "Georgieva",
                            MiddleName = "Todorova",
                            Performance = 0.0,
                            PersonalId = "1294956172",
                            ProfilePicturePath = "images/profiles/default.png",
                            UserId = "20"
                        });
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Teacher Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactDetails")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Teacher Contact Details");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Student Email Address");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Teacher First Name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Shows if teacher is Deleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Teacher Last Name");

                    b.Property<string>("ProfilePicturePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Path to the profile picture of the student");

                    b.Property<string>("Titles")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Teacher Titles");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User Identifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = 21,
                            ContactDetails = "for more info visit ...",
                            Email = "stan12@gmail.com",
                            FirstName = "Stanimir",
                            IsDeleted = false,
                            LastName = "Grigorov",
                            ProfilePicturePath = "images/profiles/default.png",
                            Titles = "prof. dr. ",
                            UserId = "21"
                        },
                        new
                        {
                            Id = 22,
                            ContactDetails = "gsm:12345678655",
                            Email = "ivdra23@gmail.com",
                            FirstName = "Ivan",
                            IsDeleted = false,
                            LastName = "Draganov",
                            ProfilePicturePath = "images/profiles/default.png",
                            Titles = "doc. ",
                            UserId = "22"
                        },
                        new
                        {
                            Id = 23,
                            ContactDetails = "gsm:0987654321",
                            Email = "mariya.petrova@gmail.com",
                            FirstName = "Mariya",
                            IsDeleted = false,
                            LastName = "Petrova",
                            ProfilePicturePath = "images/profiles/default.png",
                            Titles = "assoc. prof. ",
                            UserId = "23"
                        },
                        new
                        {
                            Id = 24,
                            ContactDetails = "email: nikolai@university.com",
                            Email = "nikolai.vasilev@gmail.com",
                            FirstName = "Nikolai",
                            IsDeleted = false,
                            LastName = "Vasilev",
                            ProfilePicturePath = "images/profiles/default.png",
                            Titles = "prof. dr. ",
                            UserId = "24"
                        },
                        new
                        {
                            Id = 25,
                            ContactDetails = "for inquiries, email me",
                            Email = "radoslav.ivanov@gmail.com",
                            FirstName = "Radoslav",
                            IsDeleted = false,
                            LastName = "Ivanov",
                            ProfilePicturePath = "images/profiles/default.png",
                            Titles = "lect. ",
                            UserId = "25"
                        },
                        new
                        {
                            Id = 26,
                            ContactDetails = "gsm:0551237894",
                            Email = "katerina.dimitrova@gmail.com",
                            FirstName = "Katerina",
                            IsDeleted = false,
                            LastName = "Dimitrova",
                            ProfilePicturePath = "images/profiles/default.png",
                            Titles = "assoc. prof. ",
                            UserId = "26"
                        },
                        new
                        {
                            Id = 27,
                            ContactDetails = "gsm:0876543210",
                            Email = "petar.georgiev@gmail.com",
                            FirstName = "Petar",
                            IsDeleted = false,
                            LastName = "Georgiev",
                            ProfilePicturePath = "images/profiles/default.png",
                            Titles = "lect. ",
                            UserId = "27"
                        },
                        new
                        {
                            Id = 28,
                            ContactDetails = "email: lidia@faculty.com",
                            Email = "lidia.todorova@gmail.com",
                            FirstName = "Lidia",
                            IsDeleted = false,
                            LastName = "Todorova",
                            ProfilePicturePath = "images/profiles/default.png",
                            Titles = "prof. ",
                            UserId = "28"
                        },
                        new
                        {
                            Id = 29,
                            ContactDetails = "gsm:022112233",
                            Email = "stefan.kovachev@gmail.com",
                            FirstName = "Stefan",
                            IsDeleted = false,
                            LastName = "Kovachev",
                            ProfilePicturePath = "images/profiles/default.png",
                            Titles = "doc. ",
                            UserId = "29"
                        },
                        new
                        {
                            Id = 30,
                            ContactDetails = "email: valentina.nikolova@edu.com",
                            Email = "valentina.nikolova@gmail.com",
                            FirstName = "Valentina",
                            IsDeleted = false,
                            LastName = "Nikolova",
                            ProfilePicturePath = "images/profiles/default.png",
                            Titles = "prof. dr. ",
                            UserId = "30"
                        });
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("PersonalId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("Personal ID is a unique identifier for each person.");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Absence", b =>
                {
                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.Student", "Student")
                        .WithMany("Аbsences")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Class", b =>
                {
                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.Teacher", "Teacher")
                        .WithMany("Classes")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.ClassCourse", b =>
                {
                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.Class", "Class")
                        .WithMany("ClassCourses")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.Course", "Course")
                        .WithMany("CourseClasses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Course", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.Teacher", "Teacher")
                        .WithMany("Courses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Publisher");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Grade", b =>
                {
                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.Course", "Course")
                        .WithMany("Grades")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.Student", "Student")
                        .WithMany("Grades")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Remark", b =>
                {
                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.Student", "Student")
                        .WithMany("Remarks")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Student", b =>
                {
                    b.HasOne("StudentManagementSystem.Infrastructure.Data.Models.Class", "Class")
                        .WithMany("Students")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Teacher", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Class", b =>
                {
                    b.Navigation("ClassCourses");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Course", b =>
                {
                    b.Navigation("CourseClasses");

                    b.Navigation("Grades");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Student", b =>
                {
                    b.Navigation("Grades");

                    b.Navigation("Remarks");

                    b.Navigation("Аbsences");
                });

            modelBuilder.Entity("StudentManagementSystem.Infrastructure.Data.Models.Teacher", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
